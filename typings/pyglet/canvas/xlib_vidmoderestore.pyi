"""
This type stub file was generated by pyright.
"""

"""Fork a child process and inform it of mode changes to each screen.  The
child waits until the parent process dies, and then connects to each X server 
with a mode change and restores the mode.

This emulates the behaviour of Windows and Mac, so that resolution changes
made by an application are not permanent after the program exits, even if
the process is terminated uncleanly.

The child process is communicated to via a pipe, and watches for parent
death with a Linux extension signal handler.
"""
_restore_mode_child_installed = ...
_restorable_screens = ...
_mode_write_pipe = ...
class ModePacket:
    format = ...
    size = ...
    def __init__(self, display, screen, width, height, rate) -> None:
        ...
    
    def encode(self): # -> bytes:
        ...
    
    @classmethod
    def decode(cls, data): # -> Self@ModePacket:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def set(self): # -> None:
        ...
    


def get_modes_array(display, screen): # -> tuple[_Pointer[_Pointer[XF86VidModeModeInfo]], int]:
    ...

def get_matching_mode(modes, n_modes, width, height, rate): # -> None:
    ...

def free_modes_array(modes, n_modes): # -> None:
    ...

def set_initial_mode(mode): # -> None:
    ...

