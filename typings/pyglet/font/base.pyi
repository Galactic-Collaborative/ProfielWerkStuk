"""
This type stub file was generated by pyright.
"""

from pyglet.gl import *
from pyglet import image

"""Abstract classes used by pyglet.font implementations.

These classes should not be constructed directly.  Instead, use the functions
in `pyglet.font` to obtain platform-specific instances.  You can use these
classes as a documented interface to the concrete classes.
"""
_other_grapheme_extend = ...
_logical_order_exception = ...
_grapheme_extend = ...
_CR = ...
_LF = ...
_control = ...
_extend = ...
_prepend = ...
_spacing_mark = ...
def grapheme_break(left, right): # -> bool:
    ...

def get_grapheme_clusters(text): # -> list[Unknown]:
    """Implements Table 2 of UAX #29: Grapheme Cluster Boundaries.

    Does not currently implement Hangul syllable rules.
    
    :Parameters:
        `text` : unicode
            String to cluster.

    .. versionadded:: 1.1.2

    :rtype: List of `unicode`
    :return: List of Unicode grapheme clusters
    """
    ...

class Glyph(image.TextureRegion):
    """A single glyph located within a larger texture.

    Glyphs are drawn most efficiently using the higher level APIs, for example
    `GlyphString`.

    :Ivariables:
        `advance` : int
            The horizontal advance of this glyph, in pixels.
        `vertices` : (int, int, int, int)
            The vertices of this glyph, with (0,0) originating at the
            left-side bearing at the baseline.
        `colored` : bool
            If a glyph is colored by the font renderer, such as an emoji, it may
            be treated differently by pyglet. For example, being omitted from text color shaders.

    """
    baseline = ...
    lsb = ...
    advance = ...
    vertices = ...
    colored = ...
    def set_bearings(self, baseline, left_side_bearing, advance, x_offset=..., y_offset=...): # -> None:
        """Set metrics for this glyph.

        :Parameters:
            `baseline` : int
                Distance from the bottom of the glyph to its baseline;
                typically negative.
            `left_side_bearing` : int
                Distance to add to the left edge of the glyph.
            `advance` : int
                Distance to move the horizontal advance to the next glyph.
            `offset_x` : int
                Distance to move the glyph horizontally from its default position.
            `offset_y` : int
                Distance to move the glyph vertically from its default position.
        """
        ...
    
    def get_kerning_pair(self, right_glyph): # -> Literal[0]:
        """Not implemented.
        """
        ...
    


class GlyphTexture(image.Texture):
    region_class = Glyph


class GlyphTextureAtlas(image.atlas.TextureAtlas):
    """A texture atlas containing glyphs."""
    texture_class = GlyphTexture
    def __init__(self, width=..., height=..., fmt=..., min_filter=..., mag_filter=...) -> None:
        ...
    


class GlyphTextureBin(image.atlas.TextureBin):
    """Same as a TextureBin but allows you to specify filter of Glyphs."""
    def add(self, img, fmt=..., min_filter=..., mag_filter=..., border=...):
        ...
    


class GlyphRenderer:
    """Abstract class for creating glyph images.
    """
    def __init__(self, font) -> None:
        ...
    
    def render(self, text):
        ...
    


class FontException(Exception):
    """Generic exception related to errors from the font module.  Typically
    these relate to invalid font data."""
    ...


class Font:
    """Abstract font class able to produce glyphs.

    To construct a font, use :py:func:`pyglet.font.load`, which will instantiate the
    platform-specific font class.

    Internally, this class is used by the platform classes to manage the set
    of textures into which glyphs are written.

    :Ivariables:
        `ascent` : int
            Maximum ascent above the baseline, in pixels.
        `descent` : int
            Maximum descent below the baseline, in pixels. Usually negative.
    """
    texture_width = ...
    texture_height = ...
    optimize_fit = ...
    glyph_fit = ...
    texture_internalformat = ...
    texture_min_filter = ...
    texture_mag_filter = ...
    ascent = ...
    descent = ...
    glyph_renderer_class = GlyphRenderer
    texture_class = GlyphTextureBin
    def __init__(self) -> None:
        ...
    
    @property
    def name(self):
        """Return the Family Name of the font as a string."""
        ...
    
    @classmethod
    def add_font_data(cls, data): # -> None:
        """Add font data to the font loader.

        This is a class method and affects all fonts loaded.  Data must be
        some byte string of data, for example, the contents of a TrueType font
        file.  Subclasses can override this method to add the font data into
        the font registry.

        There is no way to instantiate a font given the data directly, you
        must use :py:func:`pyglet.font.load` specifying the font name.
        """
        ...
    
    @classmethod
    def have_font(cls, name): # -> Literal[True]:
        """Determine if a font with the given name is installed.

        :Parameters:
            `name` : str
                Name of a font to search for

        :rtype: bool
        """
        ...
    
    def create_glyph(self, image, fmt=...):
        """Create a glyph using the given image.

        This is used internally by `Font` subclasses to add glyph data
        to the font.  Glyphs are packed within large textures maintained by
        `Font`.  This method inserts the image into a font texture and returns
        a glyph reference; it is up to the subclass to add metadata to the
        glyph.

        Applications should not use this method directly.

        :Parameters:
            `image` : `pyglet.image.AbstractImage`
                The image to write to the font texture.
            `fmt` : `int`
                Override for the format and internalformat of the atlas texture

        :rtype: `Glyph`
        """
        ...
    
    def get_glyphs(self, text): # -> list[Unknown]:
        """Create and return a list of Glyphs for `text`.

        If any characters do not have a known glyph representation in this
        font, a substitution will be made.

        :Parameters:
            `text` : str or unicode
                Text to render.

        :rtype: list of `Glyph`
        """
        ...
    
    def get_glyphs_for_width(self, text, width): # -> list[Unknown]:
        """Return a list of glyphs for `text` that fit within the given width.
        
        If the entire text is larger than 'width', as much as possible will be
        used while breaking after a space or zero-width space character.  If a
        newline is encountered in text, only text up to that newline will be
        used.  If no break opportunities (newlines or spaces) occur within
        `width`, the text up to the first break opportunity will be used (this
        will exceed `width`).  If there are no break opportunities, the entire
        text will be used.

        You can assume that each character of the text is represented by
        exactly one glyph; so the amount of text "used up" can be determined
        by examining the length of the returned glyph list.

        :Parameters:
            `text` : str or unicode
                Text to render.
            `width` : int
                Maximum width of returned glyphs.
        
        :rtype: list of `Glyph`

        :see: `GlyphString`
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    


