"""
This type stub file was generated by pyright.
"""

from ctypes import *

"""
Wrapper around the Linux FontConfig library. Used to find available fonts.
"""
FcResult = c_int
FC_FAMILY = ...
FC_SIZE = ...
FC_SLANT = ...
FC_WEIGHT = ...
FC_FT_FACE = ...
FC_FILE = ...
FC_WEIGHT_REGULAR = ...
FC_WEIGHT_BOLD = ...
FC_SLANT_ROMAN = ...
FC_SLANT_ITALIC = ...
FcType = c_int
FcMatchKind = c_int
class _FcValueUnion(Union):
    _fields_ = ...


class FcValue(Structure):
    _fields_ = ...


class FontConfig:
    def __init__(self) -> None:
        ...
    
    def dispose(self): # -> None:
        ...
    
    def create_search_pattern(self): # -> FontConfigSearchPattern:
        ...
    
    def find_font(self, name, size=..., bold=..., italic=...): # -> FontConfigSearchResult | None:
        ...
    
    def have_font(self, name): # -> bool:
        ...
    
    def char_index(self, ft_face, character):
        ...
    


class FontConfigPattern:
    def __init__(self, fontconfig, pattern=...) -> None:
        ...
    
    @property
    def is_valid(self): # -> None:
        ...
    


class FontConfigSearchPattern(FontConfigPattern):
    def __init__(self, fontconfig) -> None:
        ...
    
    def match(self): # -> FontConfigSearchResult | None:
        ...
    
    def dispose(self): # -> None:
        ...
    


class FontConfigSearchResult(FontConfigPattern):
    def __init__(self, fontconfig, result_pattern) -> None:
        ...
    
    @property
    def name(self): # -> str | Any | None:
        ...
    
    @property
    def size(self): # -> Any | None:
        ...
    
    @property
    def bold(self): # -> Any:
        ...
    
    @property
    def italic(self): # -> Any:
        ...
    
    @property
    def face(self): # -> Any | None:
        ...
    
    @property
    def file(self): # -> str | Any | None:
        ...
    
    def dispose(self): # -> None:
        ...
    


_fontconfig_instance = ...
def get_fontconfig(): # -> FontConfig:
    ...

