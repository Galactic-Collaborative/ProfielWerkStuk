"""
This type stub file was generated by pyright.
"""

from pyglet.font import base
from pyglet.font.freetype_lib import *

class FreeTypeGlyphRenderer(base.GlyphRenderer):
    def __init__(self, font) -> None:
        ...
    
    def render(self, text):
        ...
    


FreeTypeFontMetrics = ...
class MemoryFaceStore:
    def __init__(self) -> None:
        ...
    
    def add(self, face): # -> None:
        ...
    
    def contains(self, name): # -> bool:
        ...
    
    def get(self, name, bold, italic): # -> None:
        ...
    


class FreeTypeFont(base.Font):
    glyph_renderer_class = FreeTypeGlyphRenderer
    _memory_faces = ...
    def __init__(self, name, size, bold=..., italic=..., stretch=..., dpi=...) -> None:
        ...
    
    @property
    def name(self): # -> str:
        ...
    
    @property
    def ascent(self):
        ...
    
    @property
    def descent(self):
        ...
    
    def get_glyph_slot(self, character):
        ...
    
    @classmethod
    def have_font(cls, name): # -> bool:
        ...
    
    @classmethod
    def add_font_data(cls, data): # -> None:
        ...
    


class FreeTypeFace:
    """FreeType typographic face object.

    Keeps the reference count to the face at +1 as long as this object exists. If other objects
    want to keep a face without a reference to this object, they should increase the reference
    counter themselves and decrease it again when done.
    """
    def __init__(self, ft_face) -> None:
        ...
    
    @classmethod
    def from_file(cls, file_name): # -> Self@FreeTypeFace:
        ...
    
    @classmethod
    def from_fontconfig(cls, match): # -> Self@FreeTypeFace:
        ...
    
    @property
    def name(self): # -> str:
        ...
    
    @property
    def family_name(self): # -> str:
        ...
    
    @property
    def style_flags(self):
        ...
    
    @property
    def bold(self):
        ...
    
    @property
    def italic(self):
        ...
    
    @property
    def face_flags(self):
        ...
    
    def __del__(self): # -> None:
        ...
    
    def set_char_size(self, size, dpi): # -> bool:
        ...
    
    def get_character_index(self, character):
        ...
    
    def get_glyph_slot(self, glyph_index):
        ...
    
    def get_font_metrics(self, size, dpi): # -> FreeTypeFontMetrics:
        ...
    


class FreeTypeMemoryFace(FreeTypeFace):
    def __init__(self, data) -> None:
        ...
    


