"""
This type stub file was generated by pyright.
"""

import ctypes

"""
Query system Windows fonts with pure Python.

Public domain work by anatoly techtonik <techtonik@gmail.com>
Use MIT License if public domain doesn't make sense for you.



The task: Get monospace font for an application in the order of
preference.

A problem: Font ID in Windows is its name. Windows doesn't provide
any information about filenames they contained in. From two different
files with the same font name you can get only one.

Windows also doesn't have a clear concept of _generic font family_
familiar from CSS specification. Here is how fontquery maps Windows
LOGFONT properties to generic CSS font families:

  serif      -   (LOGFONT.lfPitchAndFamily >> 4) == FF_ROMAN
  sans-serif -   (LOGFONT.lfPitchAndFamily >> 4) == FF_SWISS
  cursive    -   (LOGFONT.lfPitchAndFamily >> 4) == FF_SCRIPT
  fantasy    -   (LOGFONT.lfPitchAndFamily >> 4) == FF_DECORATIVE
  monospace  -   (lf.lfPitchAndFamily & 0b11) == FIXED_PITCH

NOTE: ATM, May 2015, the Microsoft documentation related to monospace
is misleading due to poor wording:
 - FF_MODERN in the description of LOGFONT structure tells
   "Fonts with constant stroke width (monospace), with or without serifs.
    Monospace fonts are usually modern.
    Pica, Elite, and CourierNew are examples.
   "
   
   Stroke width is the 'pen width', not glyph width. It should read

   "Fonts with constant stroke width, with or without serifs.
    Monospace fonts are usually modern, but not all modern are monospace
   "

PYGLET NOTE:
Examination of all fonts in a windows xp machine shows that all fonts
with

  fontentry.vector and fontentry.family != FF_DONTCARE

are rendered fine.


Use cases:
 [x] get the list of all available system font names
 [ ] get the list of all fonts for generic family
 [ ] get the list of all fonts for specific charset
 [ ] check if specific font is available

Considerations:
 - performance of querying all system fonts is not measured
 - Windows doesn't allow to get filenames of the fonts, so if there
   are two fonts with the same name, one will be missing

MSDN:

    If you request a font named Palatino, but no such font is available
on the system, the font mapper will substitute a font that has similar
attributes but a different name.

   [ ] check if font chosen by the system has required family

    To get the appropriate font, call EnumFontFamiliesEx with the
desired font characteristics in the LOGFONT structure, then retrieve the
appropriate typeface name and create the font using CreateFont or
CreateFontIndirect.

"""
DEBUG = ...
__all__ = ['have_font', 'font_list']
__version__ = ...
__url__ = ...
class FontEntry:
    """
    Font classification.
    Level 0:
    - name
    - vector (True if font is vector, False for raster fonts)
    - format: ttf | ...
    """
    def __init__(self, name, vector, format, monospace, family) -> None:
        ...
    


FONTDB = ...
user32 = ...
gdi32 = ...
CHAR = ctypes.c_char
TCHAR = CHAR
BYTE = ctypes.c_ubyte
ANSI_CHARSET = ...
ARABIC_CHARSET = ...
BALTIC_CHARSET = ...
CHINESEBIG5_CHARSET = ...
DEFAULT_CHARSET = ...
EASTEUROPE_CHARSET = ...
GB2312_CHARSET = ...
GREEK_CHARSET = ...
HANGUL_CHARSET = ...
HEBREW_CHARSET = ...
JOHAB_CHARSET = ...
MAC_CHARSET = ...
OEM_CHARSET = ...
RUSSIAN_CHARSET = ...
SHIFTJIS_CHARSET = ...
SYMBOL_CHARSET = ...
THAI_CHARSET = ...
TURKISH_CHARSET = ...
VIETNAMESE_CHARSET = ...
CHARSET_NAMES = ...
DEFAULT_PITCH = ...
FIXED_PITCH = ...
VARIABLE_PITCH = ...
FF_DONTCARE = ...
FF_ROMAN = ...
FF_SWISS = ...
FF_MODERN = ...
FF_SCRIPT = ...
FF_DECORATIVE = ...
class FONTSIGNATURE(ctypes.Structure):
    _fields_ = ...


class NEWTEXTMETRIC(ctypes.Structure):
    _fields_ = ...


class NEWTEXTMETRICW(ctypes.Structure):
    _fields_ = ...


class NEWTEXTMETRICEX(ctypes.Structure):
    _fields_ = ...


class NEWTEXTMETRICEXW(ctypes.Structure):
    _fields_ = ...


FONTENUMPROC = ...
FONTENUMPROCW = ...
enum_font_names = ...
def query(charset=...): # -> list[Unknown]:
    """
    Prepare and call EnumFontFamiliesEx.

    query()
      - return tuple with sorted list of all available system fonts
    query(charset=ANSI_CHARSET)
      - return tuple sorted list of system fonts supporting ANSI charset

    """
    ...

def have_font(name, refresh=...): # -> bool:
    """
    Return True if font with specified `name` is present. The result
    of querying system font names is cached. Set `refresh` parameter
    to True to purge cache and reload font information.
    """
    ...

def font_list(vector_only=..., monospace_only=...): # -> list[str]:
    """Return list of system installed font names."""
    ...

if __name__ == '__main__':
    ...
