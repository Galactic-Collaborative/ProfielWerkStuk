"""
This type stub file was generated by pyright.
"""

import pyglet as _pyglet
import sys as _sys
import pyglet.window
from pyglet.gl.gl import *
from pyglet.gl.lib import GLException
from pyglet.gl import gl_info
from pyglet.gl.gl_compat import GL_INTENSITY, GL_LUMINANCE
from pyglet import compat_platform
from .base import CanvasConfig, Config, Context, ObjectSpace
from .headless import HeadlessConfig as Config

"""OpenGL interface.

This package imports all OpenGL and registered OpenGL extension
functions.  Functions have identical signatures to their C counterparts.

OpenGL is documented in full at the `OpenGL Reference Pages`_.

The `OpenGL Programming Guide`_, also known as "The Red Book", is a popular
reference manual organised by topic. It is available in digital and paper
editions.

.. _OpenGL Reference Pages: https://www.khronos.org/registry/OpenGL-Refpages/
.. _OpenGL Programming Guide: http://opengl-redbook.com/

The following subpackages are imported into this "mega" package already
(and so are available by importing ``pyglet.gl``):

``pyglet.gl.gl``
    OpenGL
``pyglet.gl.gl.glext_arb``
    ARB registered OpenGL extension functions

These subpackages are also available, but are not imported into this namespace
by default:

``pyglet.gl.glext_nv``
    nVidia OpenGL extension functions
``pyglet.gl.agl``
    AGL (Mac OS X OpenGL context functions)
``pyglet.gl.glx``
    GLX (Linux OpenGL context functions)
``pyglet.gl.glxext_arb``
    ARB registered GLX extension functions
``pyglet.gl.glxext_nv``
    nvidia GLX extension functions
``pyglet.gl.wgl``
    WGL (Windows OpenGL context functions)
``pyglet.gl.wglext_arb``
    ARB registered WGL extension functions
``pyglet.gl.wglext_nv``
    nvidia WGL extension functions

The information modules are provided for convenience, and are documented below.
"""
_is_pyglet_doc_run = ...
current_context = ...
class ContextException(Exception):
    ...


class ConfigException(Exception):
    ...


if _pyglet.options['debug_texture']:
    _debug_texture_total = ...
    _debug_texture_sizes = ...
    _debug_texture = ...
    _glBindTexture = ...
    def glBindTexture(target, texture): # -> Any:
        ...
    
    _glTexImage2D = ...
    def glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels): # -> Any:
        ...
    
    _glDeleteTextures = ...
    def glDeleteTextures(n, textures): # -> Any:
        ...
    
if _is_pyglet_doc_run:
    ...
else:
    ...
_shadow_window = ...
if not_is_pyglet_doc_run and 'pyglet.window' not in _sys.modules and _pyglet.options['shadow_window']:
    ...
