"""
This type stub file was generated by pyright.
"""

from pyglet.gl import *

"""Manage related vertex attributes within a single vertex domain.

A vertex "domain" consists of a set of attribute descriptions that together
describe the layout of one or more vertex buffers which are used together to
specify the vertices in a primitive.  Additionally, the domain manages the
buffers used to store the data and will resize them as necessary to accommodate
new vertices.

Domains can optionally be indexed, in which case they also manage a buffer
containing vertex indices.  This buffer is grown separately and has no size
relation to the attribute buffers.

Applications can create vertices (and optionally, indices) within a domain
with the :py:meth:`VertexDomain.create` method.  This returns a
:py:class:`VertexList` representing the list of vertices created.  The vertex
attribute data within the group can be modified, and the changes will be made
to the underlying buffers automatically.

The entire domain can be efficiently drawn in one step with the
:py:meth:`VertexDomain.draw` method, assuming all the vertices comprise
primitives of the same OpenGL primitive mode.
"""
_c_types = ...
_gl_types = ...
class VertexDomain:
    """Management of a set of vertex lists.

    Construction of a vertex domain is usually done with the
    :py:func:`create_domain` function.
    """
    version = ...
    _initial_count = ...
    def __init__(self, program, attribute_meta) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def safe_alloc(self, count): # -> Literal[0]:
        """Allocate vertices, resizing the buffers if necessary."""
        ...
    
    def safe_realloc(self, start, count, new_count): # -> Literal[0]:
        """Reallocate vertices, resizing the buffers if necessary."""
        ...
    
    def create(self, count, index_count=...): # -> VertexList:
        """Create a :py:class:`VertexList` in this domain.

        :Parameters:
            `count` : int
                Number of vertices to create.
            `index_count`: None
                Ignored for non indexed VertexDomains

        :rtype: :py:class:`VertexList`
        """
        ...
    
    def draw(self, mode): # -> None:
        """Draw all vertices in the domain.

        All vertices in the domain are drawn at once. This is the
        most efficient way to render primitives.

        :Parameters:
            `mode` : int
                OpenGL drawing mode, e.g. ``GL_POINTS``, ``GL_LINES``, etc.

        """
        ...
    
    def draw_subset(self, mode, vertex_list): # -> None:
        """Draw a specific VertexList in the domain.

        The `vertex_list` parameter specifies a :py:class:`VertexList`
        to draw. Only primitives in that list will be drawn.

        :Parameters:
            `mode` : int
                OpenGL drawing mode, e.g. ``GL_POINTS``, ``GL_LINES``, etc.
            `vertex_list` : `VertexList`
                Vertex list to draw.

        """
        ...
    
    @property
    def is_empty(self): # -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class VertexList:
    """A list of vertices within a :py:class:`VertexDomain`.  Use
    :py:meth:`VertexDomain.create` to construct this list.
    """
    def __init__(self, domain, start, count) -> None:
        ...
    
    def draw(self, mode): # -> None:
        """Draw this vertex list in the given OpenGL mode.

        :Parameters:
            `mode` : int
                OpenGL drawing mode, e.g. ``GL_POINTS``, ``GL_LINES``, etc.

        """
        ...
    
    def resize(self, count, index_count=...): # -> None:
        """Resize this group.

        :Parameters:
            `count` : int
                New number of vertices in the list.
            `index_count`: None
                Ignored for non indexed VertexDomains

        """
        ...
    
    def delete(self): # -> None:
        """Delete this group."""
        ...
    
    def migrate(self, domain): # -> None:
        """Move this group from its current domain and add to the specified
        one.  Attributes on domains must match.  (In practice, used to change
        parent state of some vertices).

        :Parameters:
            `domain` : `VertexDomain`
                Domain to migrate this vertex list to.

        """
        ...
    
    def set_attribute_data(self, name, data): # -> None:
        ...
    
    def __getattr__(self, name):
        """dynamic access to vertex attributes, for backwards compatibility.
        """
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    


class IndexedVertexDomain(VertexDomain):
    """Management of a set of indexed vertex lists.

    Construction of an indexed vertex domain is usually done with the
    :py:func:`create_domain` function.
    """
    _initial_index_count = ...
    def __init__(self, program, attribute_meta, index_gl_type=...) -> None:
        ...
    
    def safe_index_alloc(self, count): # -> Literal[0]:
        """Allocate indices, resizing the buffers if necessary."""
        ...
    
    def safe_index_realloc(self, start, count, new_count): # -> Literal[0]:
        """Reallocate indices, resizing the buffers if necessary."""
        ...
    
    def create(self, count, index_count): # -> IndexedVertexList:
        """Create an :py:class:`IndexedVertexList` in this domain.

        :Parameters:
            `count` : int
                Number of vertices to create
            `index_count`
                Number of indices to create

        """
        ...
    
    def get_index_region(self, start, count):
        """Get a data from a region of the index buffer.

        :Parameters:
            `start` : int
                Start of the region to map.
            `count` : int
                Number of indices to map.

        :rtype: Array of int
        """
        ...
    
    def set_index_region(self, start, count, data): # -> None:
        ...
    
    def draw(self, mode): # -> None:
        """Draw all vertices in the domain.

        All vertices in the domain are drawn at once. This is the
        most efficient way to render primitives.

        :Parameters:
            `mode` : int
                OpenGL drawing mode, e.g. ``GL_POINTS``, ``GL_LINES``, etc.

        """
        ...
    
    def draw_subset(self, mode, vertex_list): # -> None:
        """Draw a specific IndexedVertexList in the domain.

        The `vertex_list` parameter specifies a :py:class:`IndexedVertexList`
        to draw. Only primitives in that list will be drawn.

        :Parameters:
            `mode` : int
                OpenGL drawing mode, e.g. ``GL_POINTS``, ``GL_LINES``, etc.
            `vertex_list` : `IndexedVertexList`
                Vertex list to draw.

        """
        ...
    


class IndexedVertexList(VertexList):
    """A list of vertices within an :py:class:`IndexedVertexDomain` that are
    indexed. Use :py:meth:`IndexedVertexDomain.create` to construct this list.
    """
    _indices_cache = ...
    _indices_cache_version = ...
    def __init__(self, domain, start, count, index_start, index_count) -> None:
        ...
    
    def resize(self, count, index_count): # -> None:
        """Resize this group.

        :Parameters:
            `count` : int
                New number of vertices in the list.
            `index_count` : int
                New number of indices in the list.

        """
        ...
    
    def delete(self): # -> None:
        """Delete this group."""
        ...
    
    def migrate(self, domain): # -> None:
        """Move this group from its current indexed domain and add to the
        specified one.  Attributes on domains must match.  (In practice, used 
        to change parent state of some vertices).

        :Parameters:
            `domain` : `IndexedVertexDomain`
                Indexed domain to migrate this vertex list to.

        """
        ...
    
    @property
    def indices(self): # -> None:
        """Array of index data."""
        ...
    
    @indices.setter
    def indices(self, data): # -> None:
        ...
    


