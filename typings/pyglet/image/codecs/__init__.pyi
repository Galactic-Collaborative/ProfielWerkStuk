"""
This type stub file was generated by pyright.
"""

import os.path
from pyglet.util import CodecRegistry, DecodeException, Decoder, EncodeException, Encoder
from pyglet import compat_platform

"""Collection of image encoders and decoders.

Modules must subclass ImageDecoder and ImageEncoder for each method of
decoding/encoding they support.

Modules must also implement the two functions::

    def get_decoders():
        # Return a list of ImageDecoder instances or []
        return []

    def get_encoders():
        # Return a list of ImageEncoder instances or []
        return []

"""
class _ImageCodecRegistry(CodecRegistry):
    """Subclass of CodecRegistry that adds support for animation methods."""
    def __init__(self) -> None:
        ...
    
    def add_decoders(self, module): # -> None:
        """Override the default method to also add animation decoders.
        """
        ...
    
    def get_animation_decoders(self, filename=...): # -> list[Any] | list[Unknown]:
        """Get a list of animation decoders. If a `filename` is provided, only
           decoders supporting that extension will be returned. An empty list
           will be return if no encoders for that extension are available.
        """
        ...
    
    def decode_animation(self, filename, file, **kwargs): # -> Any:
        ...
    


registry = ...
add_decoders = ...
add_encoders = ...
get_animation_decoders = ...
get_decoders = ...
get_encoders = ...
class ImageDecodeException(DecodeException):
    ...


class ImageEncodeException(EncodeException):
    ...


class ImageDecoder(Decoder):
    def get_animation_file_extensions(self): # -> list[Unknown]:
        """Return a list of accepted file extensions, e.g. ['.gif', '.flc']
        Lower-case only.
        """
        ...
    
    def decode(self, filename, file):
        """Decode the given file object and return an instance of `Image`.
        Throws ImageDecodeException if there is an error.  filename
        can be a file type hint.
        """
        ...
    
    def decode_animation(self, filename, file):
        """Decode the given file object and return an instance of :py:class:`~pyglet.image.Animation`.
        Throws ImageDecodeException if there is an error.  filename
        can be a file type hint.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    


class ImageEncoder(Encoder):
    def encode(self, image, filename, file):
        """Encode the given image to the given file.  filename
        provides a hint to the file format desired.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    


def add_default_codecs(): # -> None:
    ...

