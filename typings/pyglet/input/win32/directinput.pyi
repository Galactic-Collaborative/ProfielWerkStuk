"""
This type stub file was generated by pyright.
"""

from pyglet.event import EventDispatcher
from pyglet.input import base
from pyglet.input.base import ControllerManager

_abs_instance_names = ...
_rel_instance_names = ...
_btn_instance_names = ...
class DirectInputDevice(base.Device):
    def __init__(self, display, device, device_instance) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def get_guid(self): # -> str:
        """Generate an SDL2 style GUID from the product guid."""
        ...
    
    def open(self, window=..., exclusive=...): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def get_controls(self): # -> list[Unknown]:
        ...
    
    def matches(self, guid_id, device_instance): # -> bool:
        ...
    


_i_dinput = ...
GUID_DEVINTERFACE_HID = ...
class DIDeviceManager(EventDispatcher):
    def __init__(self) -> None:
        ...
    
    def set_current_devices(self): # -> None:
        """Sets all currently discovered devices in the devices list.
        Be careful when using this, as this creates new device objects. Should only be called on initialization of
        the manager and if for some reason the window connection event isn't registered.
        """
        ...
    
    def register_device_events(self, skip_warning=..., window=...): # -> bool:
        """Register the first OS Window to receive events of disconnect and connection of devices.
        Returns True if events were successfully registered.
        """
        ...
    
    def on_close(self): # -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    


_di_manager = ...
class DIControllerManager(ControllerManager):
    def __init__(self, display=...) -> None:
        ...
    
    def get_controllers(self): # -> list[Controller]:
        ...
    


def get_devices(display=...): # -> list[Unknown]:
    ...

def get_joysticks(display=...): # -> list[Joystick]:
    ...

def get_controllers(display=...): # -> list[Controller]:
    ...

