"""
This type stub file was generated by pyright.
"""

import pyglet
from ctypes import Structure
from . import MediaDecoder
from .base import StreamingSource
from .ffmpeg_lib import *
from ..exceptions import MediaFormatException

"""Use ffmpeg to decode audio and video media.
"""
class FileInfo:
    def __init__(self) -> None:
        ...
    


class StreamVideoInfo:
    def __init__(self, width, height, sample_aspect_num, sample_aspect_den, frame_rate_num, frame_rate_den, codec_id) -> None:
        ...
    


class StreamAudioInfo:
    def __init__(self, sample_format, sample_rate, channels) -> None:
        ...
    


class FFmpegFile(Structure):
    _fields_ = ...


class FFmpegStream(Structure):
    _fields_ = ...


class FFmpegException(MediaFormatException):
    ...


def ffmpeg_get_audio_buffer_size(audio_format):
    """Return the audio buffer size

    Buffer size can accomodate 1 sec of audio data.
    """
    ...

def ffmpeg_init(): # -> None:
    """Initialize libavformat and register all the muxers, demuxers and
    protocols."""
    ...

class MemoryFileObject:
    """A class to manage reading and seeking of a ffmpeg file object."""
    buffer_size = ...
    def __init__(self, file) -> None:
        ...
    
    def __del__(self): # -> None:
        """These are usually freed when the source is, but no guarantee."""
        ...
    


def ffmpeg_open_memory_file(filename, file_object): # -> tuple[FFmpegFile, MemoryFileObject]:
    """Open a media file from a file object.
    :rtype: FFmpegFile
    :return: The structure containing all the information for the media.
    """
    ...

def ffmpeg_open_filename(filename): # -> FFmpegFile:
    """Open the media file.

    :rtype: FFmpegFile
    :return: The structure containing all the information for the media.
    """
    ...

def ffmpeg_close_file(file): # -> None:
    """Close the media file and free resources."""
    ...

def ffmpeg_file_info(file): # -> FileInfo:
    """Get information on the file:

        - number of streams
        - duration
        - artist
        - album
        - date
        - track

    :rtype: FileInfo
    :return: The file info instance containing all the meta information.
    """
    ...

def ffmpeg_stream_info(file, stream_index): # -> StreamVideoInfo | StreamAudioInfo | None:
    """Open the stream
    """
    ...

def ffmpeg_open_stream(file, index): # -> FFmpegStream:
    ...

def ffmpeg_close_stream(stream): # -> None:
    ...

def ffmpeg_seek_file(file, timestamp): # -> None:
    ...

def ffmpeg_read(file, packet): # -> bool:
    """Read from the stream a packet.

    :rtype: bool
    :return: True if the packet was correctly read. False if the end of stream
        was reached or an error occured.
    """
    ...

def ffmpeg_get_packet_pts(file, packet):
    ...

def ffmpeg_get_frame_ts(stream):
    ...

def ffmpeg_init_packet():
    ...

def ffmpeg_free_packet(packet): # -> None:
    ...

def ffmpeg_unref_packet(packet): # -> None:
    ...

def ffmpeg_transfer_packet(dst, src): # -> None:
    ...

def get_version():
    """Return an informative version string of FFmpeg"""
    ...

def timestamp_from_ffmpeg(timestamp): # -> float:
    ...

def timestamp_to_ffmpeg(timestamp): # -> int:
    ...

class _Packet:
    def __init__(self, packet, timestamp) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    


class VideoPacket(_Packet):
    _next_id = ...
    def __init__(self, packet, timestamp) -> None:
        ...
    


class AudioPacket(_Packet):
    ...


class FFmpegSource(StreamingSource):
    SAMPLE_CORRECTION_PERCENT_MAX = ...
    MAX_QUEUE_SIZE = ...
    def __init__(self, filename, file=...) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def seek(self, timestamp): # -> None:
        ...
    
    def get_audio_data(self, num_bytes, compensation_time=...): # -> AudioData | None:
        ...
    
    def get_next_video_timestamp(self): # -> None:
        ...
    
    def get_next_video_frame(self, skip_empty_frame=...): # -> None:
        ...
    
    @property
    def audio_format(self): # -> None:
        ...
    
    @audio_format.setter
    def audio_format(self, value): # -> None:
        ...
    


if pyglet.options['debug_media']:
    _debug = ...
else:
    _debug = ...
class FFmpegDecoder(MediaDecoder):
    def get_file_extensions(self): # -> tuple[Literal['.mp3'], Literal['.ogg']]:
        ...
    
    def decode(self, filename, file, streaming=...): # -> FFmpegSource | StaticSource:
        ...
    


def get_decoders(): # -> list[FFmpegDecoder]:
    ...

def get_encoders(): # -> list[Unknown]:
    ...

