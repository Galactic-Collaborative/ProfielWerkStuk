"""
This type stub file was generated by pyright.
"""

from threading import Thread
from pyglet.util import DecodeException
from .base import StreamingSource
from . import MediaDecoder

"""Multi-format decoder using Gstreamer.
"""
class GStreamerDecodeException(DecodeException):
    ...


class _GLibMainLoopThread(Thread):
    """A background Thread for a GLib MainLoop"""
    def __init__(self) -> None:
        ...
    
    def run(self): # -> None:
        ...
    


class _MessageHandler:
    """Message Handler class for GStreamer Sources.
    
    This separate class holds a weak reference to the
    Source, preventing garbage collection issues. 
    
    """
    def __init__(self, source) -> None:
        ...
    
    def message(self, bus, message): # -> None:
        """The main message callback"""
        ...
    
    def notify_caps(self, pad, *args): # -> None:
        """notify::caps callback"""
        ...
    
    def pad_added(self, element, pad): # -> None:
        """pad-added callback"""
        ...
    
    def no_more_pads(self, element): # -> None:
        """Finished Adding pads"""
        ...
    
    def new_sample(self, sink):
        """new-sample callback"""
        ...
    
    @staticmethod
    def unknown_type(uridecodebin, decodebin, caps): # -> None:
        """unknown-type callback for unreadable files"""
        ...
    


class GStreamerSource(StreamingSource):
    source_instances = ...
    sentinal = ...
    def __init__(self, filename, file=...) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def delete(self): # -> None:
        ...
    
    def get_audio_data(self, num_bytes, compensation_time=...): # -> AudioData | None:
        ...
    
    def seek(self, timestamp): # -> None:
        ...
    


class GStreamerDecoder(MediaDecoder):
    def __init__(self) -> None:
        ...
    
    def get_file_extensions(self): # -> tuple[Literal['.mp3'], Literal['.flac'], Literal['.ogg'], Literal['.m4a']]:
        ...
    
    def decode(self, filename, file, streaming=...): # -> GStreamerSource | StaticSource:
        ...
    


def get_decoders(): # -> list[GStreamerDecoder]:
    ...

def get_encoders(): # -> list[Unknown]:
    ...

