"""
This type stub file was generated by pyright.
"""

import pyogg
from pyglet.media import StreamingSource
from pyglet.media.codecs import MediaDecoder

_debug = ...
if _debug:
    ...
if not(pyogg.PYOGG_OGG_AVAIL and notpyogg.PYOGG_VORBIS_AVAIL and notpyogg.PYOGG_VORBIS_FILE_AVAIL) and (notpyogg.PYOGG_OPUS_AVAIL and notpyogg.PYOGG_OPUS_FILE_AVAIL) and notpyogg.PYOGG_FLAC_AVAIL:
    ...
if pyogg.PYOGG_FLAC_AVAIL:
    FLAC__StreamDecoderEofCallback = ...
    def metadata_callback(self, decoder, metadata, client_data): # -> None:
        ...
    
class MemoryVorbisObject:
    def __init__(self, file) -> None:
        ...
    


class UnclosedVorbisFileStream(pyogg.VorbisFileStream):
    def __del__(self): # -> None:
        ...
    
    def clean_up(self): # -> None:
        """PyOgg calls clean_up on end of data. We may want to loop a sound or replay. Prevent this.
        Rely on GC (__del__) to clean up objects instead.
        """
        ...
    


class UnclosedOpusFileStream(pyogg.OpusFileStream):
    def __del__(self): # -> None:
        ...
    
    def clean_up(self): # -> None:
        ...
    


class MemoryOpusObject:
    def __init__(self, filename, file) -> None:
        ...
    


class MemoryOpusFileStream(UnclosedOpusFileStream):
    def __init__(self, filename, file) -> None:
        ...
    


class MemoryVorbisFileStream(UnclosedVorbisFileStream):
    def __init__(self, path, file) -> None:
        ...
    


class UnclosedFLACFileStream(pyogg.FlacFileStream):
    def __init__(self, *args, **kw) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    


class MemoryFLACFileStream(UnclosedFLACFileStream):
    def __init__(self, path, file) -> None:
        ...
    
    def read_callback(self, decoder, buffer, size, data): # -> Literal[0, 1, 2]:
        ...
    
    def seek_callback(self, decoder, offset, data): # -> Literal[1, 0]:
        ...
    
    def tell_callback(self, decoder, offset, data): # -> Literal[1, 0]:
        """Decoder wants to know the current position of the file stream."""
        ...
    
    def length_callback(self, decoder, length, data): # -> Literal[1, 0]:
        """Decoder wants to know the total length of the stream."""
        ...
    
    def eof_callback(self, decoder, data):
        ...
    


class PyOggSource(StreamingSource):
    def __init__(self, filename, file) -> None:
        ...
    
    def get_audio_data(self, num_bytes, compensation_time=...): # -> AudioData | None:
        """Data returns as c_short_array instead of LP_c_char or c_ubyte, cast each buffer."""
        ...
    
    def __del__(self): # -> None:
        ...
    


class PyOggFLACSource(PyOggSource):
    def seek(self, timestamp): # -> None:
        ...
    


class PyOggVorbisSource(PyOggSource):
    def get_audio_data(self, num_bytes, compensation_time=...): # -> AudioData | None:
        ...
    
    def seek(self, timestamp): # -> None:
        ...
    


class PyOggOpusSource(PyOggSource):
    def seek(self, timestamp): # -> None:
        ...
    


class PyOggDecoder(MediaDecoder):
    vorbis_exts = ...
    flac_exts = ...
    opus_exts = ...
    exts = ...
    def get_file_extensions(self): # -> tuple[str, ...] | tuple[Literal['.ogg'], ...] | tuple[Any, ...]:
        ...
    
    def decode(self, filename, file, streaming=...): # -> PyOggVorbisSource | PyOggFLACSource | PyOggOpusSource | StaticSource:
        ...
    


def get_decoders(): # -> list[PyOggDecoder]:
    ...

def get_encoders(): # -> list[Unknown]:
    ...

