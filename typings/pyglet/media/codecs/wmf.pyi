"""
This type stub file was generated by pyright.
"""

from pyglet.libs.win32 import com
from pyglet.libs.win32.constants import *
from pyglet.libs.win32.types import *
from pyglet.media import Source
from pyglet.media.codecs import MediaDecoder

_debug = ...
MF_SOURCE_READERF_ERROR = ...
MF_SOURCE_READERF_ENDOFSTREAM = ...
MF_SOURCE_READERF_NEWSTREAM = ...
MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED = ...
MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED = ...
MF_SOURCE_READERF_STREAMTICK = ...
MF_LOW_LATENCY = ...
MF_MT_ALL_SAMPLES_INDEPENDENT = ...
MF_MT_FIXED_SIZE_SAMPLES = ...
MF_MT_SAMPLE_SIZE = ...
MF_MT_COMPRESSED = ...
MF_MT_WRAPPED_TYPE = ...
MF_MT_AUDIO_NUM_CHANNELS = ...
MF_MT_AUDIO_SAMPLES_PER_SECOND = ...
MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND = ...
MF_MT_AUDIO_AVG_BYTES_PER_SECOND = ...
MF_MT_AUDIO_BLOCK_ALIGNMENT = ...
MF_MT_AUDIO_BITS_PER_SAMPLE = ...
MF_MT_AUDIO_VALID_BITS_PER_SAMPLE = ...
MF_MT_AUDIO_SAMPLES_PER_BLOCK = ...
MF_MT_AUDIO_CHANNEL_MASK = ...
MF_PD_DURATION = ...
MF_MT_MAJOR_TYPE = ...
MF_MT_SUBTYPE = ...
MFMediaType_Audio = ...
MFMediaType_Video = ...
MFMediaType_Protected = ...
MFMediaType_Image = ...
MFMediaType_HTML = ...
MFMediaType_Subtitle = ...
D3DFMT_X8R8G8B8 = ...
D3DFMT_P8 = ...
D3DFMT_A8R8G8B8 = ...
MFVideoFormat_RGB32 = ...
MFVideoFormat_RGB8 = ...
MFVideoFormat_ARGB32 = ...
MFVideoInterlace_Progressive = ...
MF_MT_INTERLACE_MODE = ...
MF_MT_FRAME_SIZE = ...
MF_MT_FRAME_RATE = ...
MF_MT_PIXEL_ASPECT_RATIO = ...
MF_MT_DRM_FLAGS = ...
MF_MT_DEFAULT_STRIDE = ...
WAVE_FORMAT_PCM = ...
WAVE_FORMAT_IEEE_FLOAT = ...
MFAudioFormat_PCM = ...
MFAudioFormat_Float = ...
MFImageFormat_RGB32 = ...
MFImageFormat_JPEG = ...
MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS = ...
MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING = ...
MF_SOURCE_READER_D3D_MANAGER = ...
MF_MEDIA_ENGINE_DXGI_MANAGER = ...
MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING = ...
MF_E_INVALIDSTREAMNUMBER = ...
MF_E_UNSUPPORTED_BYTESTREAM_TYPE = ...
MF_E_NO_MORE_TYPES = ...
MF_E_TOPO_CODEC_NOT_FOUND = ...
VT_I8 = ...
def timestamp_from_wmf(timestamp): # -> float:
    ...

def timestamp_to_wmf(timestamp): # -> int:
    ...

class IMFAttributes(com.pIUnknown):
    _methods_ = ...


class IMFMediaBuffer(com.pIUnknown):
    _methods_ = ...


class IMFSample(IMFAttributes, com.pIUnknown):
    _methods_ = ...


class IMFMediaType(IMFAttributes, com.pIUnknown):
    _methods_ = ...


class IMFByteStream(com.pIUnknown):
    _methods_ = ...


class IMFSourceReader(com.pIUnknown):
    _methods_ = ...


class WAVEFORMATEX(ctypes.Structure):
    _fields_ = ...
    def __repr__(self): # -> str:
        ...
    


MF_SOURCE_READER_ALL_STREAMS = ...
MF_SOURCE_READER_ANY_STREAM = ...
MF_SOURCE_READER_FIRST_AUDIO_STREAM = ...
MF_SOURCE_READER_FIRST_VIDEO_STREAM = ...
MF_SOURCE_READER_MEDIASOURCE = ...
if WINDOWS_7_OR_GREATER:
    MF_SDK_VERSION = ...
else:
    MF_SDK_VERSION = ...
MF_API_VERSION = ...
MF_VERSION = ...
MFStartup = ...
MFShutdown = ...
MFCreateAttributes = ...
MFCreateSourceReaderFromURL = ...
MFCreateSourceReaderFromByteStream = ...
if WINDOWS_7_OR_GREATER:
    MFCreateMFByteStreamOnStream = ...
MFCreateTempFile = ...
MFCreateMediaType = ...
MFCreateWaveFormatExFromMFMediaType = ...
class WMFSource(Source):
    low_latency = ...
    decode_audio = ...
    decode_video = ...
    def __init__(self, filename, file=...) -> None:
        ...
    
    def get_format(self): # -> WAVEFORMATEX | None:
        """Returns the WAVEFORMATEX data which has more information thah audio_format"""
        ...
    
    def get_audio_data(self, num_bytes, compensation_time=...): # -> AudioData | None:
        ...
    
    def get_next_video_frame(self, skip_empty_frame=...): # -> ImageData | None:
        ...
    
    def get_next_video_timestamp(self): # -> int | float | None:
        ...
    
    def seek(self, timestamp): # -> None:
        ...
    
    def set_config_attributes(self): # -> None:
        """ Here we set user specified attributes, by default we try to set low latency mode. (Win7+)"""
        ...
    
    def __del__(self): # -> None:
        ...
    


class WMFDecoder(MediaDecoder):
    def __init__(self) -> None:
        ...
    
    def get_file_extensions(self): # -> list[Unknown]:
        ...
    
    def decode(self, filename, file, streaming=...): # -> WMFSource | StaticSource:
        ...
    
    def __del__(self): # -> None:
        ...
    


def get_decoders(): # -> list[WMFDecoder]:
    ...

def get_encoders(): # -> list[Unknown]:
    ...

