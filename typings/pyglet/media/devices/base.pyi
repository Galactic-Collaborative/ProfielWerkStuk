"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod
from pyglet import event
from pyglet.util import with_metaclass

class DeviceState:
    ACTIVE = ...
    DISABLED = ...
    MISSING = ...
    UNPLUGGED = ...


class DeviceFlow:
    OUTPUT = ...
    INPUT = ...
    INPUT_OUTPUT = ...


class AudioDevice:
    """Base class for a platform independent audio device.
       _platform_state and _platform_flow is used to make device state numbers."""
    _platform_state = ...
    _platform_flow = ...
    def __init__(self, dev_id, name, description, flow, state) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class AbstractAudioDeviceManager(with_metaclass(ABCMeta, event.EventDispatcher, object)):
    def __del__(self): # -> None:
        """Required to remove handlers before exit, as it can cause problems with the event system's weakrefs."""
        ...
    
    @abstractmethod
    def get_default_output(self): # -> None:
        """Returns a default active output device or None if none available."""
        ...
    
    @abstractmethod
    def get_default_input(self): # -> None:
        """Returns a default active input device or None if none available."""
        ...
    
    @abstractmethod
    def get_output_devices(self): # -> None:
        """Returns a list of all active output devices."""
        ...
    
    @abstractmethod
    def get_input_devices(self): # -> None:
        """Returns a list of all active input devices."""
        ...
    
    @abstractmethod
    def get_all_devices(self): # -> None:
        """Returns a list of all audio devices, no matter what state they are in."""
        ...
    
    def on_device_state_changed(self, device, old_state, new_state): # -> None:
        """Event, occurs when the state of a device changes, provides old state and new state."""
        ...
    
    def on_device_added(self, device): # -> None:
        """Event, occurs when a new device is added to the system."""
        ...
    
    def on_device_removed(self, device): # -> None:
        """Event, occurs when an existing device is removed from the system."""
        ...
    
    def on_default_changed(self, device): # -> None:
        """Event, occurs when the default audio device changes."""
        ...
    


