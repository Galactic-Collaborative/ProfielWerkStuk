"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod
from pyglet.util import with_metaclass

class AbstractAudioPlayer(with_metaclass(ABCMeta)):
    """Base class for driver audio players.
    """
    AUDIO_DIFF_AVG_NB = ...
    AV_NOSYNC_THRESHOLD = ...
    def __init__(self, source, player) -> None:
        """Create a new audio player.

        :Parameters:
            `source` : `Source`
                Source to play from.
            `player` : `Player`
                Player to receive EOS and video frame sync events.

        """
        ...
    
    def on_driver_destroy(self): # -> None:
        """Called before the audio driver is going to be destroyed (a planned destroy)."""
        ...
    
    def on_driver_reset(self): # -> None:
        """Called after the audio driver has been re-initialized."""
        ...
    
    @abstractmethod
    def play(self): # -> None:
        """Begin playback."""
        ...
    
    @abstractmethod
    def stop(self): # -> None:
        """Stop (pause) playback."""
        ...
    
    @abstractmethod
    def delete(self): # -> None:
        """Stop playing and clean up all resources used by player."""
        ...
    
    @abstractmethod
    def clear(self): # -> None:
        """Clear all buffered data and prepare for replacement data.

        The player should be stopped before calling this method.
        """
        ...
    
    @abstractmethod
    def get_time(self): # -> None:
        """Return approximation of current playback time within current source.

        Returns ``None`` if the audio player does not know what the playback
        time is (for example, before any valid audio data has been read).

        :rtype: float
        :return: current play cursor time, in seconds.
        """
        ...
    
    @abstractmethod
    def prefill_audio(self): # -> None:
        """Prefill the audio buffer with audio data.

        This method is called before the audio player starts in order to 
        reduce the time it takes to fill the whole audio buffer.
        """
        ...
    
    def get_audio_time_diff(self): # -> Any | float:
        """Queries the time difference between the audio time and the `Player`
        master clock.

        The time difference returned is calculated using a weighted average on
        previous audio time differences. The algorithms will need at least 20
        measurements before returning a weighted average.

        :rtype: float
        :return: weighted average difference between audio time and master
            clock from `Player`
        """
        ...
    
    def set_volume(self, volume): # -> None:
        """See `Player.volume`."""
        ...
    
    def set_position(self, position): # -> None:
        """See :py:attr:`~pyglet.media.Player.position`."""
        ...
    
    def set_min_distance(self, min_distance): # -> None:
        """See `Player.min_distance`."""
        ...
    
    def set_max_distance(self, max_distance): # -> None:
        """See `Player.max_distance`."""
        ...
    
    def set_pitch(self, pitch): # -> None:
        """See :py:attr:`~pyglet.media.Player.pitch`."""
        ...
    
    def set_cone_orientation(self, cone_orientation): # -> None:
        """See `Player.cone_orientation`."""
        ...
    
    def set_cone_inner_angle(self, cone_inner_angle): # -> None:
        """See `Player.cone_inner_angle`."""
        ...
    
    def set_cone_outer_angle(self, cone_outer_angle): # -> None:
        """See `Player.cone_outer_angle`."""
        ...
    
    def set_cone_outer_gain(self, cone_outer_gain): # -> None:
        """See `Player.cone_outer_gain`."""
        ...
    
    @property
    def source(self): # -> CallableProxyType[Unknown]:
        """Source to play from."""
        ...
    
    @source.setter
    def source(self, value): # -> None:
        ...
    


class AbstractAudioDriver(with_metaclass(ABCMeta)):
    @abstractmethod
    def create_audio_player(self, source, player): # -> None:
        ...
    
    @abstractmethod
    def get_listener(self): # -> None:
        ...
    
    @abstractmethod
    def delete(self): # -> None:
        ...
    


class MediaEvent:
    """Representation of a media event.

    These events are used internally by some audio driver implementation to
    communicate events to the :class:`~pyglet.media.player.Player`.
    One example is the ``on_eos`` event.

    Args:
        event (str): Event description.
        timestamp (float): The time when this event happens.
        *args: Any required positional argument to go along with this event.
    """
    __slots__ = ...
    def __init__(self, event, timestamp=..., *args) -> None:
        ...
    
    def sync_dispatch_to_player(self, player): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    


