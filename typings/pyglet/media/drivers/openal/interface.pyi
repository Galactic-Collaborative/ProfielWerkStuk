"""
This type stub file was generated by pyright.
"""

from pyglet.media.exceptions import MediaException

_debug = ...
class OpenALException(MediaException):
    def __init__(self, message=..., error_code=..., error_string=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class OpenALObject:
    """Base class for OpenAL objects."""
    ...


class OpenALDevice(OpenALObject):
    """OpenAL audio device."""
    def __init__(self, device_name=...) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def delete(self): # -> None:
        ...
    
    @property
    def is_ready(self): # -> bool:
        ...
    
    def create_context(self): # -> OpenALContext:
        ...
    
    def get_version(self): # -> tuple[int, int]:
        ...
    
    def get_extensions(self): # -> list[str]:
        ...
    
    def check_context_error(self, message=...): # -> None:
        """Check whether there is an OpenAL error and raise exception if present."""
        ...
    


class OpenALContext(OpenALObject):
    def __init__(self, device, al_context) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def delete(self): # -> None:
        ...
    
    def make_current(self): # -> None:
        ...
    
    def create_source(self): # -> OpenALSource:
        ...
    


class OpenALSource(OpenALObject):
    def __init__(self, context) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def delete(self): # -> None:
        ...
    
    @property
    def is_initial(self): # -> bool:
        ...
    
    @property
    def is_playing(self): # -> bool:
        ...
    
    @property
    def is_paused(self): # -> bool:
        ...
    
    @property
    def is_stopped(self): # -> bool:
        ...
    
    position = ...
    velocity = ...
    gain = ...
    buffers_queued = ...
    buffers_processed = ...
    min_gain = ...
    max_gain = ...
    reference_distance = ...
    rolloff_factor = ...
    pitch = ...
    max_distance = ...
    direction = ...
    cone_inner_angle = ...
    cone_outer_angle = ...
    cone_outer_gain = ...
    sec_offset = ...
    sample_offset = ...
    byte_offset = ...
    def play(self): # -> None:
        ...
    
    def pause(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def clear(self): # -> None:
        ...
    
    def get_buffer(self):
        ...
    
    def queue_buffer(self, buf): # -> None:
        ...
    
    def unqueue_buffers(self): # -> Any:
        ...
    


OpenALOrientation = ...
class OpenALListener(OpenALObject):
    @property
    def position(self): # -> tuple[float, float, float]:
        ...
    
    @position.setter
    def position(self, values): # -> None:
        ...
    
    @property
    def velocity(self): # -> tuple[float, float, float]:
        ...
    
    @velocity.setter
    def velocity(self, values): # -> None:
        ...
    
    @property
    def gain(self): # -> float:
        ...
    
    @gain.setter
    def gain(self, value): # -> None:
        ...
    
    @property
    def orientation(self): # -> OpenALOrientation:
        ...
    
    @orientation.setter
    def orientation(self, values): # -> None:
        ...
    


class OpenALBuffer(OpenALObject):
    _format_map = ...
    def __init__(self, al_buffer, context) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    @property
    def is_valid(self): # -> bool:
        ...
    
    @property
    def al_buffer(self): # -> Unknown | None:
        ...
    
    @property
    def name(self):
        ...
    
    def delete(self): # -> None:
        ...
    
    def data(self, audio_data, audio_format, length=...): # -> None:
        ...
    


class OpenALBufferPool(OpenALObject):
    """At least Mac OS X doesn't free buffers when a source is deleted; it just
    detaches them from the source.  So keep our own recycled queue.
    """
    def __init__(self, context) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def clear(self): # -> None:
        ...
    
    def get_buffer(self):
        """Convenience for returning one buffer name"""
        ...
    
    def get_buffers(self, number): # -> list[Unknown]:
        """Returns an array containing `number` buffer names.  The returned list must
        not be modified in any way, and may get changed by subsequent calls to
        get_buffers.
        """
        ...
    
    def unqueue_buffer(self, buf): # -> None:
        """A buffer has finished playing, free it."""
        ...
    


