"""
This type stub file was generated by pyright.
"""

from pyglet.libs.win32.types import *

_debug = ...
class XAudio2Driver:
    allow_3d = ...
    processor = ...
    category = ...
    restart_on_error = ...
    max_frequency_ratio = ...
    def __init__(self) -> None:
        """Creates an XAudio2 master voice and sets up 3D audio if specified. This attaches to the default audio
        device and will create a virtual audio endpoint that changes with the system. It will not recover if a
        critical error is encountered such as no more audio devices are present.
        """
        ...
    
    def on_default_changed(self, device): # -> None:
        """Callback derived from the Audio Devices to help us determine when the system no longer has output."""
        ...
    
    @property
    def active_voices(self): # -> list[Unknown]:
        ...
    
    @property
    def pooled_voices(self): # -> list[Unknown]:
        ...
    
    @property
    def all_voices(self):
        """All pooled and active voices."""
        ...
    
    def clear_pool(self): # -> None:
        """Destroy and then clear the pool of voices"""
        ...
    
    def clear_active(self): # -> None:
        """Destroy and then clear all active voices"""
        ...
    
    def set_device(self, device): # -> None:
        """Attach XA2 with a specific device rather than the virtual device."""
        ...
    
    def enable_3d(self): # -> None:
        """Initializes the prerequisites for 3D positional audio and initializes with default DSP settings."""
        ...
    
    @property
    def volume(self): # -> float:
        ...
    
    @volume.setter
    def volume(self, value): # -> None:
        """Sets global volume of the master voice."""
        ...
    
    def apply3d(self, source_voice, commit=...): # -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def get_performance(self): # -> XAUDIO2_PERFORMANCE_DATA:
        """Retrieve some basic XAudio2 performance data such as memory usage and source counts."""
        ...
    
    def create_listener(self): # -> XAudio2Listener:
        ...
    
    def get_source_voice(self, source, player): # -> XA2SourceVoice:
        """ Get a source voice from the pool. Source voice creation can be slow to create/destroy. So pooling is
            recommended. We pool based on audio channels as channels must be the same as well as frequency.
            Source voice handles all of the audio playing and state for a single source."""
        ...
    
    def return_voice(self, voice): # -> None:
        """Reset a voice and return it to the pool."""
        ...
    
    @staticmethod
    def create_buffer(audio_data): # -> XAUDIO2_BUFFER:
        """Creates a XAUDIO2_BUFFER to be used with a source voice.
            Audio data cannot be purged until the source voice has played it; doing so will cause glitches.
            Furthermore, if the data is not in a string buffer, such as pure bytes, it must be converted."""
        ...
    
    @staticmethod
    def create_wave_format(audio_format): # -> WAVEFORMATEX:
        ...
    


class XA2SourceVoice:
    def __init__(self, voice, callback, audio_format) -> None:
        ...
    
    @property
    def player(self):
        """Returns the player class, stored within the callback."""
        ...
    
    def delete(self): # -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def destroy(self): # -> None:
        """Completely destroy the voice."""
        ...
    
    def acquired(self, player): # -> None:
        """A voice has been reacquired, set the player for callback."""
        ...
    
    def reset(self): # -> None:
        """When a voice is returned to the pool, reset position on emitter."""
        ...
    
    @property
    def buffers_queued(self): # -> Any:
        """Get the amount of buffers in the current voice. Adding flag for no samples played is 3x faster."""
        ...
    
    @property
    def volume(self): # -> float:
        ...
    
    @volume.setter
    def volume(self, value): # -> None:
        ...
    
    @property
    def is_emitter(self): # -> bool:
        ...
    
    @property
    def position(self): # -> tuple[Any, Any, Any] | tuple[Literal[0], Literal[0], Literal[0]]:
        ...
    
    @position.setter
    def position(self, position): # -> None:
        ...
    
    @property
    def min_distance(self): # -> Any | Literal[0]:
        """Curve distance scaler that is used to scale normalized distance curves to user-defined world units,
        and/or to exaggerate their effect."""
        ...
    
    @min_distance.setter
    def min_distance(self, value): # -> None:
        ...
    
    @property
    def frequency(self): # -> float:
        """The actual frequency ratio. If voice is 3d enabled, will be overwritten next apply3d cycle."""
        ...
    
    @frequency.setter
    def frequency(self, value): # -> None:
        ...
    
    @property
    def cone_orientation(self): # -> tuple[Any, Any, Any] | tuple[Literal[0], Literal[0], Literal[0]]:
        """The orientation of the sound emitter."""
        ...
    
    @cone_orientation.setter
    def cone_orientation(self, value): # -> None:
        ...
    
    _ConeAngles = ...
    @property
    def cone_angles(self): # -> _ConeAngles:
        """The inside and outside angles of the sound projection cone."""
        ...
    
    def set_cone_angles(self, inside, outside): # -> None:
        """The inside and outside angles of the sound projection cone."""
        ...
    
    @property
    def cone_outside_volume(self): # -> Any | Literal[0]:
        """The volume scaler of the sound beyond the outer cone."""
        ...
    
    @cone_outside_volume.setter
    def cone_outside_volume(self, value): # -> None:
        ...
    
    @property
    def cone_inside_volume(self): # -> Any | Literal[0]:
        """The volume scaler of the sound within the inner cone."""
        ...
    
    @cone_inside_volume.setter
    def cone_inside_volume(self, value): # -> None:
        ...
    
    def flush(self): # -> None:
        """Stop and removes all buffers already queued. OnBufferEnd is called for each."""
        ...
    
    def play(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def submit_buffer(self, x2_buffer): # -> None:
        ...
    


class XAudio2Listener:
    def __init__(self, driver) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def delete(self): # -> None:
        ...
    
    @property
    def position(self): # -> tuple[Any, Any, Any]:
        ...
    
    @position.setter
    def position(self, value): # -> None:
        ...
    
    @property
    def orientation(self): # -> tuple[Any, Any, Any, Any, Any, Any]:
        ...
    
    @orientation.setter
    def orientation(self, orientation): # -> None:
        ...
    


