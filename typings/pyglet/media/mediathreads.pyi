"""
This type stub file was generated by pyright.
"""

_debug = ...
class MediaThread:
    """A thread that cleanly exits on interpreter shutdown, and provides
    a sleep method that can be interrupted and a termination method.

    :Ivariables:
        `_condition` : threading.Condition
            Lock _condition on all instance variables.
        `_stopped` : bool
            True if `stop` has been called.

    """
    _threads = ...
    _threads_lock = ...
    def __init__(self) -> None:
        ...
    
    def run(self):
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        """Stop the thread and wait for it to terminate.

        The `stop` instance variable is set to ``True`` and the condition is
        notified.  It is the responsibility of the `run` method to check
        the value of `stop` after each sleep or wait and to return if set.
        """
        ...
    
    def sleep(self, timeout): # -> None:
        """Wait for some amount of time, or until notified.

        :Parameters:
            `timeout` : float
                Time to wait, in seconds.

        """
        ...
    
    def notify(self): # -> None:
        """Interrupt the current sleep operation.

        If the thread is currently sleeping, it will be woken immediately,
        instead of waiting the full duration of the timeout.
        """
        ...
    
    @classmethod
    def atexit(cls): # -> None:
        ...
    


class PlayerWorkerThread(MediaThread):
    """Worker thread for refilling players."""
    _nap_time = ...
    def __init__(self) -> None:
        ...
    
    def run(self): # -> None:
        ...
    
    def add(self, player): # -> None:
        ...
    
    def remove(self, player): # -> None:
        ...
    


