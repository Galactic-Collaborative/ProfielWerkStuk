"""
This type stub file was generated by pyright.
"""

from pyglet.media.codecs.base import Source

class _Envelope:
    """Base class for SynthesisSource amplitude envelopes."""
    def get_generator(self, sample_rate, duration):
        ...
    


class FlatEnvelope(_Envelope):
    """A flat envelope, providing basic amplitude setting.

    :Parameters:
        `amplitude` : float
            The amplitude (volume) of the wave, from 0.0 to 1.0.
            Values outside this range will be clamped.
    """
    def __init__(self, amplitude=...) -> None:
        ...
    
    def get_generator(self, sample_rate, duration): # -> Generator[float, None, None]:
        ...
    


class LinearDecayEnvelope(_Envelope):
    """A linearly decaying envelope.

    This envelope linearly decays the amplitude from the peak value
    to 0, over the length of the waveform.

    :Parameters:
        `peak` : float
            The Initial peak value of the envelope, from 0.0 to 1.0.
            Values outside this range will be clamped.
    """
    def __init__(self, peak=...) -> None:
        ...
    
    def get_generator(self, sample_rate, duration): # -> Generator[float | Literal[0], None, None]:
        ...
    


class ADSREnvelope(_Envelope):
    """A four part Attack, Decay, Suspend, Release envelope.

    This is a four part ADSR envelope. The attack, decay, and release
    parameters should be provided in seconds. For example, a value of
    0.1 would be 100ms. The sustain_amplitude parameter affects the
    sustain volume. This defaults to a value of 0.5, but can be provided
    on a scale from 0.0 to 1.0.

    :Parameters:
        `attack` : float
            The attack time, in seconds.
        `decay` : float
            The decay time, in seconds.
        `release` : float
            The release time, in seconds.
        `sustain_amplitude` : float
            The sustain amplitude (volume), from 0.0 to 1.0.
    """
    def __init__(self, attack, decay, release, sustain_amplitude=...) -> None:
        ...
    
    def get_generator(self, sample_rate, duration): # -> Generator[float | Literal[0], None, None]:
        ...
    


class TremoloEnvelope(_Envelope):
    """A tremolo envelope, for modulation amplitude.

    A tremolo envelope that modulates the amplitude of the
    waveform with a sinusoidal pattern. The depth and rate
    of modulation can be specified. Depth is calculated as
    a percentage of the maximum amplitude. For example:
    a depth of 0.2 and amplitude of 0.5 will fluctuate
    the amplitude between 0.4 an 0.5.

    :Parameters:
        `depth` : float
            The amount of fluctuation, from 0.0 to 1.0.
        `rate` : float
            The fluctuation frequency, in seconds.
        `amplitude` : float
            The peak amplitude (volume), from 0.0 to 1.0.
    """
    def __init__(self, depth, rate, amplitude=...) -> None:
        ...
    
    def get_generator(self, sample_rate, duration): # -> Generator[float | Literal[0], None, None]:
        ...
    


def silence_generator(frequency, sample_rate): # -> Generator[Literal[0], None, None]:
    ...

def noise_generator(frequency, sample_rate): # -> Generator[float, None, None]:
    ...

def sine_generator(frequency, sample_rate): # -> Generator[float, None, None]:
    ...

def triangle_generator(frequency, sample_rate): # -> Generator[Unknown | int, None, None]:
    ...

def sawtooth_generator(frequency, sample_rate): # -> Generator[Unknown, None, None]:
    ...

def pulse_generator(frequency, sample_rate, duty_cycle=...): # -> Generator[int, None, None]:
    ...

class SynthesisSource(Source):
    """Base class for synthesized waveforms.

    :Parameters:
        `generator` : A non-instantiated generator object
            A waveform generator that produces a stream of floats from (-1, 1)
        `duration` : float
            The length, in seconds, of audio that you wish to generate.
        `sample_rate` : int
            Audio samples per second. (CD quality is 44100).
        `envelope` : :py:class:`pyglet.media.synthesis._Envelope`
            An optional Envelope to apply to the waveform.
    """
    def __init__(self, generator, duration, sample_rate=..., envelope=...) -> None:
        ...
    
    def get_audio_data(self, num_bytes, compensation_time=...): # -> AudioData | None:
        """Return `num_bytes` bytes of audio data."""
        ...
    
    def seek(self, timestamp): # -> None:
        ...
    


class Silence(SynthesisSource):
    def __init__(self, duration, frequency=..., sample_rate=..., envelope=...) -> None:
        """Create a Silent waveform."""
        ...
    


class WhiteNoise(SynthesisSource):
    def __init__(self, duration, frequency=..., sample_rate=..., envelope=...) -> None:
        """Create a random white noise waveform."""
        ...
    


class Sine(SynthesisSource):
    def __init__(self, duration, frequency=..., sample_rate=..., envelope=...) -> None:
        """Create a sinusoid (sine) waveform."""
        ...
    


class Square(SynthesisSource):
    def __init__(self, duration, frequency=..., sample_rate=..., envelope=...) -> None:
        """Create a Square (pulse) waveform."""
        ...
    


class Triangle(SynthesisSource):
    def __init__(self, duration, frequency=..., sample_rate=..., envelope=...) -> None:
        """Create a Triangle waveform."""
        ...
    


class Sawtooth(SynthesisSource):
    def __init__(self, duration, frequency=..., sample_rate=..., envelope=...) -> None:
        """Create a Sawtooth waveform."""
        ...
    


def sine_operator(sample_rate=..., frequency=..., index=..., modulator=..., envelope=...): # -> Generator[float, None, None]:
    """A sine wave generator that can be optionally modulated with another generator.

    This generator represents a single FM Operator. It can be used by itself as a
    simple sine wave, or modulated by another waveform generator. Multiple operators
    can be linked together in this way. For example::

        operator1 = sine_operator(samplerate=44800, frequency=1.22)
        operator2 = sine_operator(samplerate=44800, frequency=99, modulator=operator1)
        operator3 = sine_operator(samplerate=44800, frequency=333, modulator=operator2)
        operator4 = sine_operator(samplerate=44800, frequency=545, modulator=operator3)

    :Parameters:
        `sample_rate` : int
            Audio samples per second. (CD quality is 44100).
        `frequency` : float
            The frequency, in Hz, of the waveform you wish to generate.
        `index` : float
            The modulation index. Defaults to 1
        `modulator` : sine_operator
            An optional operator to modulate this one.
        `envelope` : :py:class:`pyglet.media.synthesis._Envelope`
            An optional Envelope to apply to the waveform.
    """
    ...

def composite_operator(*operators): # -> Generator[float, None, None]:
    ...

