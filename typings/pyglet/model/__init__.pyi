"""
This type stub file was generated by pyright.
"""

import pyglet
from pyglet import gl, graphics
from pyglet.gl import current_context
from pyglet.math import Mat4, Vec3
from pyglet.graphics import shader
from .codecs import add_default_codecs as _add_default_codecs, registry as _codec_registry

"""Loading of 3D models.

A :py:class:`~pyglet.model.Model` is an instance of a 3D object.

The following example loads a ``"teapot.obj"`` model::

    import pyglet

    window = pyglet.window.Window()

    teapot = pyglet.model.load('teapot.obj')

    @window.event
    def on_draw():
        teapot.draw()

    pyglet.app.run()


You can also load models with :py:meth:`~pyglet.resource.model`.
See :py:mod:`~pyglet.resource` for more information.


Efficient Drawing
=================

As with Sprites or Text, Models can be added to a
:py:class:`~pyglet.graphics.Batch` for efficient drawing. This is
preferred to calling their ``draw`` methods individually.  To do this,
simply pass in a reference to the :py:class:`~pyglet.graphics.Batch`
instance when loading the Model::


    import pyglet

    window = pyglet.window.Window()
    batch = pyglet.graphics.Batch()

    teapot = pyglet.model.load('teapot.obj', batch=batch)

    @window.event
    def on_draw():
        batch.draw()

    pyglet.app.run()


.. versionadded:: 1.4
"""
def load(filename, file=..., decoder=..., batch=..., group=...): # -> Any:
    """Load a 3D model from a file.

    :Parameters:
        `filename` : str
            Used to guess the model format, and to load the file if `file` is
            unspecified.
        `file` : file-like object or None
            Source of model data in any supported format.        
        `decoder` : ModelDecoder or None
            If unspecified, all decoders that are registered for the filename
            extension are tried. An exception is raised if no codecs are
            registered for the file extension, or if decoding fails.
        `batch` : Batch or None
            An optional Batch instance to add this model to.
        `group` : Group or None
            An optional top level Group.

    :rtype: :py:mod:`~pyglet.model.Model`
    """
    ...

def get_default_shader(): # -> ShaderProgram:
    ...

def get_default_textured_shader():
    ...

class Model:
    """Instance of a 3D object.

    See the module documentation for usage.
    """
    def __init__(self, vertex_lists, groups, batch) -> None:
        """Create a model.

        :Parameters:
            `vertex_lists` : list
                A list of `~pyglet.graphics.VertexList` or
                `~pyglet.graphics.IndexedVertexList`.
            `groups` : list
                A list of `~pyglet.model.TexturedMaterialGroup`, or
                 `~pyglet.model.MaterialGroup`. Each group corresponds to
                 a vertex list in `vertex_lists` of the same index.
            `batch` : `~pyglet.graphics.Batch`
                Optional batch to add the model to. If no batch is provided,
                the model will maintain its own internal batch.
        """
        ...
    
    @property
    def batch(self): # -> Unknown | Batch:
        """The graphics Batch that the Model belongs to.

        The Model can be migrated from one batch to another, or removed from
        a batch (for individual drawing). If not part of any batch, the Model
        will keep its own internal batch. Note that batch migration can be
        an expensive operation.

        :type: :py:class:`pyglet.graphics.Batch`
        """
        ...
    
    @batch.setter
    def batch(self, batch): # -> None:
        ...
    
    @property
    def matrix(self): # -> Mat4:
        ...
    
    @matrix.setter
    def matrix(self, matrix): # -> None:
        ...
    
    def draw(self): # -> None:
        """Draw the model.

        This is not recommended. See the module documentation
        for information on efficient drawing of multiple models.
        """
        ...
    


class Material:
    __slots__ = ...
    def __init__(self, name, diffuse, ambient, specular, emission, shininess, texture_name=...) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class BaseMaterialGroup(graphics.Group):
    default_vert_src = ...
    default_frag_src = ...
    matrix = ...
    def __init__(self, material, program, order=..., parent=...) -> None:
        ...
    


class TexturedMaterialGroup(BaseMaterialGroup):
    default_vert_src = ...
    default_frag_src = ...
    def __init__(self, material, program, texture, order=..., parent=...) -> None:
        ...
    
    def set_state(self): # -> None:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class MaterialGroup(BaseMaterialGroup):
    default_vert_src = ...
    default_frag_src = ...
    def set_state(self): # -> None:
        ...
    


