"""
This type stub file was generated by pyright.
"""

import pyglet
from pyglet.gl import *
from pyglet import event, graphics, image

"""Display positioned, scaled and rotated images.

A sprite is an instance of an image displayed on-screen.  Multiple sprites can
display the same image at different positions on the screen.  Sprites can also
be scaled larger or smaller, rotated at any angle and drawn at a fractional
opacity.

The following complete example loads a ``"ball.png"`` image and creates a
sprite for that image.  The sprite is then drawn in the window's
draw event handler::

    import pyglet

    ball_image = pyglet.image.load('ball.png')
    ball = pyglet.sprite.Sprite(ball_image, x=50, y=50)

    window = pyglet.window.Window()

    @window.event
    def on_draw():
        ball.draw()

    pyglet.app.run()

The sprite can be moved by modifying the :py:attr:`~pyglet.sprite.Sprite.x` and 
:py:attr:`~pyglet.sprite.Sprite.y` properties.  Other
properties determine the sprite's :py:attr:`~pyglet.sprite.Sprite.rotation`,
:py:attr:`~pyglet.sprite.Sprite.scale` and
:py:attr:`~pyglet.sprite.Sprite.opacity`.

By default, sprite coordinates are restricted to integer values to avoid
sub-pixel artifacts.  If you require to use floats, for example for smoother
animations, you can set the ``subpixel`` parameter to ``True`` when creating
the sprite (:since: pyglet 1.2).

The sprite's positioning, rotation and scaling all honor the original
image's anchor (:py:attr:`~pyglet.image.AbstractImage.anchor_x`,
:py:attr:`~pyglet.image.AbstractImage.anchor_y`).


Drawing multiple sprites
========================

Sprites can be "batched" together and drawn at once more quickly than if each
of their ``draw`` methods were called individually.  The following example
creates one hundred ball sprites and adds each of them to a :py:class:`~pyglet.graphics.Batch`.  The
entire batch of sprites is then drawn in one call::

    batch = pyglet.graphics.Batch()

    ball_sprites = []
    for i in range(100):
        x, y = i * 10, 50
        ball_sprites.append(pyglet.sprite.Sprite(ball_image, x, y, batch=batch))

    @window.event
    def on_draw():
        batch.draw()

Sprites can be freely modified in any way even after being added to a batch,
however a sprite can belong to at most one batch.  See the documentation for
:py:mod:`pyglet.graphics` for more details on batched rendering, and grouping of
sprites within batches.

.. versionadded:: 1.1
"""
_is_pyglet_doc_run = ...
vertex_source = ...
fragment_source = ...
fragment_array_source = ...
def get_default_shader(): # -> ShaderProgram:
    ...

def get_default_array_shader(): # -> ShaderProgram:
    ...

class SpriteGroup(graphics.Group):
    """Shared sprite rendering group.

    The group is automatically coalesced with other sprite groups sharing the
    same parent group, texture and blend parameters.
    """
    def __init__(self, texture, blend_src, blend_dest, program, parent=...) -> None:
        """Create a sprite group.

        The group is created internally when a :py:class:`~pyglet.sprite.Sprite`
        is created; applications usually do not need to explicitly create it.

        :Parameters:
            `texture` : `~pyglet.image.Texture`
                The (top-level) texture containing the sprite image.
            `blend_src` : int
                OpenGL blend source mode; for example,
                ``GL_SRC_ALPHA``.
            `blend_dest` : int
                OpenGL blend destination mode; for example,
                ``GL_ONE_MINUS_SRC_ALPHA``.
            `program` : `~pyglet.graphics.shader.ShaderProgram`
                A custom ShaderProgram.
            `order` : int
                Change the order to render above or below other Groups.
            `parent` : `~pyglet.graphics.Group`
                Optional parent group.
        """
        ...
    
    def set_state(self): # -> None:
        ...
    
    def unset_state(self): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class Sprite(event.EventDispatcher):
    """Instance of an on-screen image.

    See the module documentation for usage.
    """
    _batch = ...
    _animation = ...
    _frame_index = ...
    _paused = ...
    _rotation = ...
    _opacity = ...
    _rgb = ...
    _scale = ...
    _scale_x = ...
    _scale_y = ...
    _visible = ...
    _vertex_list = ...
    group_class = SpriteGroup
    def __init__(self, img, x=..., y=..., z=..., blend_src=..., blend_dest=..., batch=..., group=..., subpixel=...) -> None:
        """Create a sprite.

        :Parameters:
            `img` : `~pyglet.image.AbstractImage` or `~pyglet.image.Animation`
                Image or animation to display.
            `x` : int
                X coordinate of the sprite.
            `y` : int
                Y coordinate of the sprite.
            `z` : int
                Z coordinate of the sprite.
            `blend_src` : int
                OpenGL blend source mode.  The default is suitable for
                compositing sprites drawn from back-to-front.
            `blend_dest` : int
                OpenGL blend destination mode.  The default is suitable for
                compositing sprites drawn from back-to-front.
            `batch` : `~pyglet.graphics.Batch`
                Optional batch to add the sprite to.
            `group` : `~pyglet.graphics.Group`
                Optional parent group of the sprite.
            `subpixel` : bool
                Allow floating-point coordinates for the sprite. By default,
                coordinates are restricted to integer values.
        """
        ...
    
    @property
    def program(self): # -> ShaderProgram:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def delete(self): # -> None:
        """Force immediate removal of the sprite from video memory.

        This is often necessary when using batches, as the Python garbage
        collector will not necessarily call the finalizer as soon as the
        sprite is garbage.
        """
        ...
    
    @property
    def batch(self): # -> Batch | None:
        """Graphics batch.

        The sprite can be migrated from one batch to another, or removed from
        its batch (for individual drawing).  Note that this can be an expensive
        operation.

        :type: :py:class:`pyglet.graphics.Batch`
        """
        ...
    
    @batch.setter
    def batch(self, batch): # -> None:
        ...
    
    @property
    def group(self): # -> None:
        """Parent graphics group.

        The sprite can change its rendering group, however this can be an
        expensive operation.

        :type: :py:class:`pyglet.graphics.Group`
        """
        ...
    
    @group.setter
    def group(self, group): # -> None:
        ...
    
    @property
    def image(self): # -> Animation | None:
        """Image or animation to display.

        :type: :py:class:`~pyglet.image.AbstractImage` or
               :py:class:`~pyglet.image.Animation`
        """
        ...
    
    @image.setter
    def image(self, img): # -> None:
        ...
    
    @property
    def position(self): # -> tuple[int | Unknown, int | Unknown, int | Unknown]:
        """The (x, y, z) coordinates of the sprite, as a tuple.

        :Parameters:
            `x` : int
                X coordinate of the sprite.
            `y` : int
                Y coordinate of the sprite.
            `z` : int
                Z coordinate of the sprite.
        """
        ...
    
    @position.setter
    def position(self, position): # -> None:
        ...
    
    @property
    def x(self): # -> int:
        """X coordinate of the sprite.

        :type: int
        """
        ...
    
    @x.setter
    def x(self, x): # -> None:
        ...
    
    @property
    def y(self): # -> int:
        """Y coordinate of the sprite.

        :type: int
        """
        ...
    
    @y.setter
    def y(self, y): # -> None:
        ...
    
    @property
    def z(self): # -> int:
        """Z coordinate of the sprite.

        :type: int
        """
        ...
    
    @z.setter
    def z(self, z): # -> None:
        ...
    
    @property
    def rotation(self): # -> int:
        """Clockwise rotation of the sprite, in degrees.

        The sprite image will be rotated about its image's (anchor_x, anchor_y)
        position.

        :type: float
        """
        ...
    
    @rotation.setter
    def rotation(self, rotation): # -> None:
        ...
    
    @property
    def scale(self): # -> float:
        """Base Scaling factor.

        A scaling factor of 1 (the default) has no effect.  A scale of 2 will
        draw the sprite at twice the native size of its image.

        :type: float
        """
        ...
    
    @scale.setter
    def scale(self, scale): # -> None:
        ...
    
    @property
    def scale_x(self): # -> float:
        """Horizontal scaling factor.

         A scaling factor of 1 (the default) has no effect.  A scale of 2 will
         draw the sprite at twice the native width of its image.

        :type: float
        """
        ...
    
    @scale_x.setter
    def scale_x(self, scale_x): # -> None:
        ...
    
    @property
    def scale_y(self): # -> float:
        """Vertical scaling factor.

         A scaling factor of 1 (the default) has no effect.  A scale of 2 will
         draw the sprite at twice the native height of its image.

        :type: float
        """
        ...
    
    @scale_y.setter
    def scale_y(self, scale_y): # -> None:
        ...
    
    def update(self, x=..., y=..., z=..., rotation=..., scale=..., scale_x=..., scale_y=...): # -> None:
        """Simultaneously change the position, rotation or scale.

        This method is provided for convenience. There is not much
        performance benefit to updating multiple Sprite attributes at once.

        :Parameters:
            `x` : int
                X coordinate of the sprite.
            `y` : int
                Y coordinate of the sprite.
            `z` : int
                Z coordinate of the sprite.
            `rotation` : float
                Clockwise rotation of the sprite, in degrees.
            `scale` : float
                Scaling factor.
            `scale_x` : float
                Horizontal scaling factor.
            `scale_y` : float
                Vertical scaling factor.
        """
        ...
    
    @property
    def width(self): # -> int:
        """Scaled width of the sprite.

        Read-only.  Invariant under rotation.

        :type: int
        """
        ...
    
    @property
    def height(self): # -> int:
        """Scaled height of the sprite.

        Read-only.  Invariant under rotation.

        :type: int
        """
        ...
    
    @property
    def opacity(self): # -> int:
        """Blend opacity.

        This property sets the alpha component of the colour of the sprite's
        vertices.  With the default blend mode (see the constructor), this
        allows the sprite to be drawn with fractional opacity, blending with the
        background.

        An opacity of 255 (the default) has no effect.  An opacity of 128 will
        make the sprite appear translucent.

        :type: int
        """
        ...
    
    @opacity.setter
    def opacity(self, opacity): # -> None:
        ...
    
    @property
    def color(self): # -> tuple[Literal[255], Literal[255], Literal[255]] | list[int]:
        """Blend color.

        This property sets the color of the sprite's vertices. This allows the
        sprite to be drawn with a color tint.

        The color is specified as an RGB tuple of integers '(red, green, blue)'.
        Each color component must be in the range 0 (dark) to 255 (saturated).

        :type: (int, int, int)
        """
        ...
    
    @color.setter
    def color(self, rgb): # -> None:
        ...
    
    @property
    def visible(self): # -> bool:
        """True if the sprite will be drawn.

        :type: bool
        """
        ...
    
    @visible.setter
    def visible(self, visible): # -> None:
        ...
    
    @property
    def paused(self): # -> bool:
        """Pause/resume the Sprite's Animation

        If `Sprite.image` is an Animation, you can pause or resume
        the animation by setting this property to True or False.
        If not an Animation, this has no effect.

        :type: bool
        """
        ...
    
    @paused.setter
    def paused(self, pause): # -> None:
        ...
    
    @property
    def frame_index(self): # -> int:
        """The current Animation frame.

        If the `Sprite.image` is an `Animation`,
        you can query or set the current frame.
        If not an Animation, this will always
        be 0.

        :type: int
        """
        ...
    
    @frame_index.setter
    def frame_index(self, index): # -> None:
        ...
    
    def draw(self): # -> None:
        """Draw the sprite at its current position.

        See the module documentation for hints on drawing multiple sprites
        efficiently.
        """
        ...
    
    if _is_pyglet_doc_run:
        def on_animation_end(self): # -> None:
            """The sprite animation reached the final frame.

            The event is triggered only if the sprite has an animation, not an
            image.  For looping animations, the event is triggered each time
            the animation loops.

            :event:
            """
            ...
        


class AdvancedSprite(pyglet.sprite.Sprite):
    """Is a sprite that lets you change the shader program during initialization and after
    For advanced users who understand shaders."""
    def __init__(self, img, x=..., y=..., z=..., blend_src=..., blend_dest=..., batch=..., group=..., subpixel=..., program=...) -> None:
        ...
    
    @property
    def program(self): # -> ShaderProgram | None:
        ...
    
    @program.setter
    def program(self, program): # -> None:
        ...
    


