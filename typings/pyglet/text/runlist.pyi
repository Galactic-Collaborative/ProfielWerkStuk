"""
This type stub file was generated by pyright.
"""

"""Run list encoding utilities.

.. versionadded:: 1.1
"""
class _Run:
    def __init__(self, value, count) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class RunList:
    """List of contiguous runs of values.

    A `RunList` is an efficient encoding of a sequence of values.  For
    example, the sequence ``aaaabbccccc`` is encoded as ``(4, a), (2, b),
    (5, c)``.  The class provides methods for modifying and querying the
    run list without needing to deal with the tricky cases of splitting and
    merging the run list entries.

    Run lists are used to represent formatted character data in pyglet.  A
    separate run list is maintained for each style attribute, for example,
    bold, italic, font size, and so on.  Unless you are overriding the
    document interfaces, the only interaction with run lists is via
    `RunIterator`.

    The length and ranges of a run list always refer to the character
    positions in the decoded list.  For example, in the above sequence,
    ``set_run(2, 5, 'x')`` would change the sequence to ``aaxxxbccccc``.
    """
    def __init__(self, size, initial) -> None:
        """Create a run list of the given size and a default value.

        :Parameters:
            `size` : int
                Number of characters to represent initially.
            `initial` : object
                The value of all characters in the run list.

        """
        ...
    
    def insert(self, pos, length): # -> None:
        """Insert characters into the run list.

        The inserted characters will take on the value immediately preceding
        the insertion point (or the value of the first character, if `pos` is
        0).

        :Parameters:
            `pos` : int
                Insertion index
            `length` : int
                Number of characters to insert.

        """
        ...
    
    def delete(self, start, end): # -> None:
        """Remove characters from the run list.

        :Parameters:
            `start` : int
                Starting index to remove from.
            `end` : int
                End index, exclusive.

        """
        ...
    
    def set_run(self, start, end, value): # -> None:
        """Set the value of a range of characters.

        :Parameters:
            `start` : int
                Start index of range.
            `end` : int
                End of range, exclusive.
            `value` : object
                Value to set over the range.

        """
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown | int, Unknown | int, Unknown], None, None]:
        ...
    
    def get_run_iterator(self): # -> RunIterator:
        """Get an extended iterator over the run list.

        :rtype: `RunIterator`
        """
        ...
    
    def __getitem__(self, index): # -> Unknown:
        """Get the value at a character position.

        :Parameters:
            `index` : int
                Index of character.  Must be within range and non-negative.

        :rtype: object
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    


class AbstractRunIterator:
    """Range iteration over `RunList`.

    `AbstractRunIterator` objects allow any monotonically non-decreasing
    access of the iteration, including repeated iteration over the same index.
    Use the ``[index]`` operator to get the value at a particular index within
    the document.  For example::

        run_iter = iter(run_list)
        value = run_iter[0]
        value = run_iter[0]       # non-decreasing access is OK
        value = run_iter[15]
        value = run_iter[17]
        value = run_iter[16]      # this is illegal, the index decreased.

    Using `AbstractRunIterator` to access increasing indices of the value runs
    is more efficient than calling `RunList.__getitem__` repeatedly.

    You can also iterate over monotonically non-decreasing ranges over the
    iteration.  For example::
        
        run_iter = iter(run_list)
        for start, end, value in run_iter.ranges(0, 20):
            pass
        for start, end, value in run_iter.ranges(25, 30):
            pass
        for start, end, value in run_iter.ranges(30, 40):
            pass

    Both start and end indices of the slice are required and must be positive.
    """
    def __getitem__(self, index): # -> None:
        """Get the value at a given index.

        See the class documentation for examples of valid usage.

        :Parameters:
            `index` : int   
                Document position to query.

        :rtype: object
        """
        ...
    
    def ranges(self, start, end): # -> None:
        """Iterate over a subrange of the run list.

        See the class documentation for examples of valid usage.

        :Parameters:
            `start` : int
                Start index to iterate from.
            `end` : int
                End index, exclusive.

        :rtype: iterator
        :return: Iterator over (start, end, value) tuples.
        """
        ...
    


class RunIterator(AbstractRunIterator):
    def __init__(self, run_list) -> None:
        ...
    
    def __next__(self):
        ...
    
    def __getitem__(self, index):
        ...
    
    def ranges(self, start, end): # -> Generator[tuple[Unknown, Unknown, Unknown], None, None]:
        ...
    


class OverriddenRunIterator(AbstractRunIterator):
    """Iterator over a `RunIterator`, with a value temporarily replacing
    a given range.
    """
    def __init__(self, base_iterator, start, end, value) -> None:
        """Create a derived iterator.

        :Parameters:
            `start` : int
                Start of range to override
            `end` : int
                End of range to override, exclusive
            `value` : object
                Value to replace over the range

        """
        ...
    
    def ranges(self, start, end): # -> Generator[Unknown | tuple[Unknown, Unknown, Unknown], None, None]:
        ...
    
    def __getitem__(self, index): # -> Unknown:
        ...
    


class FilteredRunIterator(AbstractRunIterator):
    """Iterate over an `AbstractRunIterator` with filtered values replaced
    by a default value.
    """
    def __init__(self, base_iterator, filter, default) -> None:
        """Create a filtered run iterator.

        :Parameters:
            `base_iterator` : `AbstractRunIterator`
                Source of runs.
            `filter` : ``lambda object: bool``
                Function taking a value as parameter, and returning ``True``
                if the value is acceptable, and ``False`` if the default value
                should be substituted.
            `default` : object
                Default value to replace filtered values.

        """
        ...
    
    def ranges(self, start, end): # -> Generator[tuple[Unknown, Unknown, Unknown], None, None]:
        ...
    
    def __getitem__(self, index): # -> Unknown:
        ...
    


class ZipRunIterator(AbstractRunIterator):
    """Iterate over multiple run iterators concurrently."""
    def __init__(self, range_iterators) -> None:
        ...
    
    def ranges(self, start, end): # -> Generator[tuple[Unknown, Unknown, list[Unknown]], None, None]:
        ...
    
    def __getitem__(self, index): # -> list[Unknown]:
        ...
    


class ConstRunIterator(AbstractRunIterator):
    """Iterate over a constant value without creating a RunList."""
    def __init__(self, length, value) -> None:
        ...
    
    def __next__(self): # -> Generator[tuple[Literal[0], Unknown, Unknown], None, None]:
        ...
    
    def ranges(self, start, end): # -> Generator[tuple[Unknown, Unknown, Unknown], None, None]:
        ...
    
    def __getitem__(self, index): # -> Unknown:
        ...
    


