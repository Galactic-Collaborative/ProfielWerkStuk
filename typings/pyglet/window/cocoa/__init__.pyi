"""
This type stub file was generated by pyright.
"""

import pyglet
from ctypes import *
from pyglet.window import BaseWindow, DefaultMouseCursor, MouseCursor, WindowException
from pyglet.event import EventDispatcher
from pyglet.canvas.cocoa import CocoaCanvas
from pyglet.libs.darwin import CGPoint, cocoapy
from .systemcursor import SystemCursor
from .pyglet_delegate import PygletDelegate
from .pyglet_window import PygletToolWindow, PygletWindow
from .pyglet_view import PygletView

NSApplication = ...
NSCursor = ...
NSAutoreleasePool = ...
NSColor = ...
NSEvent = ...
NSImage = ...
quartz = ...
cf = ...
class CocoaMouseCursor(MouseCursor):
    gl_drawable = ...
    def __init__(self, cursorName) -> None:
        ...
    
    def set(self): # -> None:
        ...
    


class CocoaWindow(BaseWindow):
    _nswindow = ...
    _delegate = ...
    _mouse_platform_visible = ...
    _mouse_ignore_motion = ...
    _was_closed = ...
    _style_masks = ...
    def close(self): # -> None:
        ...
    
    def switch_to(self): # -> None:
        ...
    
    def flip(self): # -> None:
        ...
    
    def dispatch_events(self): # -> None:
        ...
    
    def dispatch_pending_events(self): # -> None:
        ...
    
    def set_caption(self, caption): # -> None:
        ...
    
    def set_icon(self, *images): # -> None:
        ...
    
    def get_location(self): # -> tuple[int, int]:
        ...
    
    def set_location(self, x, y): # -> None:
        ...
    
    def get_framebuffer_size(self): # -> tuple[int, int]:
        ...
    
    def set_size(self, width: int, height: int) -> None:
        ...
    
    def set_minimum_size(self, width: int, height: int) -> None:
        ...
    
    def set_maximum_size(self, width: int, height: int) -> None:
        ...
    
    def activate(self): # -> None:
        ...
    
    def set_visible(self, visible: bool = ...) -> None:
        ...
    
    def minimize(self): # -> None:
        ...
    
    def maximize(self): # -> None:
        ...
    
    def set_vsync(self, vsync: bool) -> None:
        ...
    
    def set_mouse_platform_visible(self, platform_visible=...): # -> None:
        ...
    
    def get_system_mouse_cursor(self, name): # -> DefaultMouseCursor | CocoaMouseCursor:
        ...
    
    def set_mouse_position(self, x, y, absolute=...): # -> None:
        ...
    
    def set_exclusive_mouse(self, exclusive=...): # -> None:
        ...
    
    def set_exclusive_keyboard(self, exclusive=...): # -> None:
        ...
    


__all__ = ["CocoaWindow"]
