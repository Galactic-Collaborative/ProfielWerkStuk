"""
This type stub file was generated by pyright.
"""

from pyglet import compat_platform

"""Key constants and utilities for pyglet.window.

Usage::

    from pyglet.window import Window
    from pyglet.window import key

    window = Window()

    @window.event
    def on_key_press(symbol, modifiers):
        # Symbolic names:
        if symbol == key.RETURN:

        # Alphabet keys:
        elif symbol == key.Z:

        # Number keys:
        elif symbol == key._1:

        # Number keypad keys:
        elif symbol == key.NUM_1:

        # Modifiers:
        if modifiers & key.MOD_CTRL:

"""
class KeyStateHandler:
    """Simple handler that tracks the state of keys on the keyboard. If a
    key is pressed then this handler holds a True value for it.
    If the window loses focus, all keys will be reset to False to avoid a
    "sticky" key state.

    For example::

        >>> win = window.Window
        >>> keyboard = key.KeyStateHandler()
        >>> win.push_handlers(keyboard)

        # Hold down the "up" arrow...

        >>> keyboard[key.UP]
        True
        >>> keyboard[key.DOWN]
        False

    """
    def __init__(self) -> None:
        ...
    
    def on_key_press(self, symbol, modifiers): # -> None:
        ...
    
    def on_key_release(self, symbol, modifiers): # -> None:
        ...
    
    def on_deactivate(self): # -> None:
        ...
    
    def __getitem__(self, key): # -> bool:
        ...
    


def modifiers_string(modifiers): # -> LiteralString:
    """Return a string describing a set of modifiers.

    Example::

        >>> modifiers_string(MOD_SHIFT | MOD_CTRL)
        'MOD_SHIFT|MOD_CTRL'

    :Parameters:
        `modifiers` : int
            Bitwise combination of modifier constants.

    :rtype: str
    """
    ...

def symbol_string(symbol): # -> str:
    """Return a string describing a key symbol.

    Example::

        >>> symbol_string(BACKSPACE)
        'BACKSPACE'

    :Parameters:
        `symbol` : int
            Symbolic key constant.

    :rtype: str
    """
    ...

def motion_string(motion): # -> str:
    """Return a string describing a text motion.

    Example::

        >>> motion_string(MOTION_NEXT_WORD)
        'MOTION_NEXT_WORD'

    :Parameters:
        `motion` : int
            Text motion constant.

    :rtype: str
    """
    ...

def user_key(scancode):
    """Return a key symbol for a key not supported by pyglet.

    This can be used to map virtual keys or scancodes from unsupported
    keyboard layouts into a machine-specific symbol.  The symbol will
    be meaningless on any other machine, or under a different keyboard layout.

    Applications should use user-keys only when user explicitly binds them
    (for example, mapping keys to actions in a game options screen).
    """
    ...

MOD_SHIFT = ...
MOD_CTRL = ...
MOD_ALT = ...
MOD_CAPSLOCK = ...
MOD_NUMLOCK = ...
MOD_WINDOWS = ...
MOD_COMMAND = ...
MOD_OPTION = ...
MOD_SCROLLLOCK = ...
MOD_FUNCTION = ...
MOD_ACCEL = ...
if compat_platform == 'darwin':
    MOD_ACCEL = ...
BACKSPACE = ...
TAB = ...
LINEFEED = ...
CLEAR = ...
RETURN = ...
ENTER = ...
PAUSE = ...
SCROLLLOCK = ...
SYSREQ = ...
ESCAPE = ...
SPACE = ...
HOME = ...
LEFT = ...
UP = ...
RIGHT = ...
DOWN = ...
PAGEUP = ...
PAGEDOWN = ...
END = ...
BEGIN = ...
DELETE = ...
SELECT = ...
PRINT = ...
EXECUTE = ...
INSERT = ...
UNDO = ...
REDO = ...
MENU = ...
FIND = ...
CANCEL = ...
HELP = ...
BREAK = ...
MODESWITCH = ...
SCRIPTSWITCH = ...
FUNCTION = ...
MOTION_UP = ...
MOTION_RIGHT = ...
MOTION_DOWN = ...
MOTION_LEFT = ...
MOTION_NEXT_WORD = ...
MOTION_PREVIOUS_WORD = ...
MOTION_BEGINNING_OF_LINE = ...
MOTION_END_OF_LINE = ...
MOTION_NEXT_PAGE = ...
MOTION_PREVIOUS_PAGE = ...
MOTION_BEGINNING_OF_FILE = ...
MOTION_END_OF_FILE = ...
MOTION_BACKSPACE = ...
MOTION_DELETE = ...
MOTION_COPY = ...
MOTION_PASTE = ...
NUMLOCK = ...
NUM_SPACE = ...
NUM_TAB = ...
NUM_ENTER = ...
NUM_F1 = ...
NUM_F2 = ...
NUM_F3 = ...
NUM_F4 = ...
NUM_HOME = ...
NUM_LEFT = ...
NUM_UP = ...
NUM_RIGHT = ...
NUM_DOWN = ...
NUM_PRIOR = ...
NUM_PAGE_UP = ...
NUM_NEXT = ...
NUM_PAGE_DOWN = ...
NUM_END = ...
NUM_BEGIN = ...
NUM_INSERT = ...
NUM_DELETE = ...
NUM_EQUAL = ...
NUM_MULTIPLY = ...
NUM_ADD = ...
NUM_SEPARATOR = ...
NUM_SUBTRACT = ...
NUM_DECIMAL = ...
NUM_DIVIDE = ...
NUM_0 = ...
NUM_1 = ...
NUM_2 = ...
NUM_3 = ...
NUM_4 = ...
NUM_5 = ...
NUM_6 = ...
NUM_7 = ...
NUM_8 = ...
NUM_9 = ...
F1 = ...
F2 = ...
F3 = ...
F4 = ...
F5 = ...
F6 = ...
F7 = ...
F8 = ...
F9 = ...
F10 = ...
F11 = ...
F12 = ...
F13 = ...
F14 = ...
F15 = ...
F16 = ...
F17 = ...
F18 = ...
F19 = ...
F20 = ...
F21 = ...
F22 = ...
F23 = ...
F24 = ...
LSHIFT = ...
RSHIFT = ...
LCTRL = ...
RCTRL = ...
CAPSLOCK = ...
LMETA = ...
RMETA = ...
LALT = ...
RALT = ...
LWINDOWS = ...
RWINDOWS = ...
LCOMMAND = ...
RCOMMAND = ...
LOPTION = ...
ROPTION = ...
SPACE = ...
EXCLAMATION = ...
DOUBLEQUOTE = ...
HASH = ...
POUND = ...
DOLLAR = ...
PERCENT = ...
AMPERSAND = ...
APOSTROPHE = ...
PARENLEFT = ...
PARENRIGHT = ...
ASTERISK = ...
PLUS = ...
COMMA = ...
MINUS = ...
PERIOD = ...
SLASH = ...
_0 = ...
_1 = ...
_2 = ...
_3 = ...
_4 = ...
_5 = ...
_6 = ...
_7 = ...
_8 = ...
_9 = ...
COLON = ...
SEMICOLON = ...
LESS = ...
EQUAL = ...
GREATER = ...
QUESTION = ...
AT = ...
BRACKETLEFT = ...
BACKSLASH = ...
BRACKETRIGHT = ...
ASCIICIRCUM = ...
UNDERSCORE = ...
GRAVE = ...
QUOTELEFT = ...
A = ...
B = ...
C = ...
D = ...
E = ...
F = ...
G = ...
H = ...
I = ...
J = ...
K = ...
L = ...
M = ...
N = ...
O = ...
P = ...
Q = ...
R = ...
S = ...
T = ...
U = ...
V = ...
W = ...
X = ...
Y = ...
Z = ...
BRACELEFT = ...
BAR = ...
BRACERIGHT = ...
ASCIITILDE = ...
_key_names = ...
_motion_names = ...
